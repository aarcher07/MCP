Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/base_dhaB_dhaT_model/__init__.py
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/base_dhaB_dhaT_model/__init__.py b/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/base_dhaB_dhaT_model/__init__.py
deleted file mode 100644
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/base_dhaB_dhaT_model/__init__.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ /dev/null	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
@@ -1,4 +0,0 @@
-from .data_set_constants import *
-from .dhaB_dhaT_model import *
-from .misc_functions import *
-from .model_constants import *
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/data_gen_funs.py
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/data_gen_funs.py b/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/data_gen_funs.py
deleted file mode 100644
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/data_gen_funs.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ /dev/null	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
@@ -1,54 +0,0 @@
-import numpy as np
-import math
-import matplotlib.pyplot as plt 
-from constants import *
-from misc_functions import *
-from dhaB_dhaT_model import DhaBDhaTModel
-from scipy.integrate import solve_ivp
-
-def f(params,init_conds,dhaB_dhaT_model,tsamples=TIME_EVALS,tol = 10**-5):
-	tsamplessecs = np.array([t*HRS_TO_SECS for t in tsamples])
-	ds = lambda t,x: dhaB_dhaT_model.ds(t,x,params)
-	ds_jac = lambda t,x: dhaB_dhaT_model.sderiv_jac_state_vars_fun(t,x,params)
-	y0 = np.zeros(len(VARIABLE_INIT_NAMES))
-	for i,init_names in enumerate(VARIABLE_INIT_NAMES):
-		y0[i] = init_conds[init_names]
-
-	sol = solve_ivp(ds,[0, tsamplessecs[-1]+10], y0, method = 'BDF', jac = ds_jac, t_eval=tsamplessecs,
-					atol=tol,rtol=tol)#, events=event_stop)
-	return sol.y[DATA_COLUMNS,:].T
-
-def generate_data(params,dhaB_dhaT_model,tsamples=TIME_EVALS,tol = 10**-5):
-
-	#CALIBRATION CONSTANT
-	if dhaB_dhaT_model.transform_name == 'log_unif':
-		bound_a,bound_b = LOG_UNIF_PRIOR_PARAMETERS['scalar']
-		scalar = 10**((bound_b - bound_a)*params[0] + bound_a) 
-	elif dhaB_dhaT_model.transform_name == 'log_norm':
-		scalar = 10**(params[0])
-	else:
-		scalar= params[0]
-
-	# PARAMETERS FOR MODEL
-	params_to_dict = {}
-	for param,key in zip(params[1:],MODEL_PARAMETER_LIST):
-		params_to_dict[key] = param
-
-	f_data = []
-
-	for conds in INIT_CONDS_GLY_PDO_DCW.values():
-		init_conds = {'G_CYTO_INIT': 0, 
-					  'H_CYTO_INIT': 0,
-					  'P_CYTO_INIT': 0,
-					  'G_EXT_INIT': conds[0], 
-					  'H_EXT_INIT': 0,
-					  'P_EXT_INIT': conds[1],
-					  'CELL_CONC_INIT': DCW_TO_COUNT_CONC*scalar*conds[2]
-					}
-
-		fvals = f(params_to_dict,init_conds,dhaB_dhaT_model,tsamples,tol)
-		# compute difference for loglikelihood
-		fvals[:,2] = fvals[:,2]/(scalar*DCW_TO_COUNT_CONC)
-		f_data.append(fvals.flatten('F'))
-
-	return f_data
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/dhaB_dhaT_model_bayesian_funs.py
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/dhaB_dhaT_model_bayesian_funs.py b/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/dhaB_dhaT_model_bayesian_funs.py
deleted file mode 100644
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/dhaB_dhaT_model_bayesian_funs.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ /dev/null	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
@@ -1,186 +0,0 @@
-import matplotlib.pyplot as plt
-import matplotlib as mpl
-mpl.rcParams['text.usetex'] = True
-mpl.rcParams['text.latex.preamble'] = r'\usepackage{amsmath}'
-from MCMC import postdraws,adaptive_postdraws
-from base_dhaB_dhaT_model.data_set_constants import *
-from base_dhaB_dhaT_model.model_constants import *
-from mpi4py import MPI
-from prior_constants import *
-import time
-from pathlib import Path
-
-comm = MPI.COMM_WORLD
-size = comm.Get_size()
-rank = comm.Get_rank()
-
-def rprior(n,transform):
-	"""
-	Generate n samples for the the prior distribution
-	@param n: number of samples
-	@param transform: "log_unif"- log uniform distribution of parameters, "log_norm" - log normal distribution,
-						" " - uniform distributioon
-	@return: n samples of the prior distribution
-	"""
-	samples = []
-	if transform == "log_unif":
-		for key,vals in LOG_UNIF_PRIOR_PARAMETERS.items():
-			samples.append(stats.uniform.rvs(size=n))
-	elif transform == "log_norm":
-		for key,vals in LOG_NORM_PRIOR_PARAMETERS.items():
-			samples.append(stats.norm.rvs(loc=vals[0],scale=vals[1],size=n))			
-	else:
-		for key,vals in PARAMETER_BOUNDS.items():
-			samples.append(stats.loguniform.rvs(a=vals[0],b=vals[1],size=n))		
-	return np.array(samples).T
-
-
-def logprior(params,transform):
-	"""
-	Computes the loglikelihood of the prior distribution
-	@param params: parameter values
-	@param transform: "log_unif"- log uniform distribution of parameters, "log_norm" - log normal distribution,
-						" " - uniform distribution
-	@return: log likelihood
-	"""
-	logpdf = 0
-	if transform == "log_unif":
-		for i,(key,vals) in enumerate(LOG_UNIF_PRIOR_PARAMETERS.items()):
-			logpdf += stats.uniform.logpdf(params[i])
-	elif transform == "log_norm":
-		for i,(key,vals) in enumerate(LOG_NORM_PRIOR_PARAMETERS.items()):
-			logpdf += stats.norm.logpdf(params[i],loc=vals[0],scale=vals[1])				
-	elif transform == " ":
-		for i,(key,vals) in enumerate(PARAMETER_BOUNDS.items()):
-			logpdf += stats.loguniform.logpdf(params[i],a=vals[0],b=vals[1])
-	else:
-		raise ValueError('Unknown transform')
-	return logpdf
-
-def loglik(params,dhaB_dhaT_model,sigma=[2,2,0.1]):
-	"""
-	Computes the log likelihood Gaussian
-	@param params: parameters for the model
-	@param dhaB_dhaT_model: instance of the DhaBDhaTModel class
-	@param sigma: standard deviation for the external Glycerol, external 1,3-PDO and DCW
-	@return: Gaussian log-likelihood
-	"""
-	#CALIBRATION CONSTANT
-	if dhaB_dhaT_model.transform_name == 'log_unif':
-		bound_a,bound_b = LOG_UNIF_PRIOR_PARAMETERS['scalar']
-		scalar = 10**((bound_b - bound_a)*params[0] + bound_a) 
-	elif dhaB_dhaT_model.transform_name == 'log_norm':
-		scalar = 10**(params[0])
-	elif dhaB_dhaT_model.transform_name == " ":
-		scalar= params[0]
-	else:
-		raise ValueError('Unknown transform')
-
-	# PARAMETERS FOR MODEL
-	params_to_dict = {}
-	params_to_dict['scalar'] = scalar
-	for param,key in zip(params[1:],MODEL_PARAMETER_LIST):
-		params_to_dict[key] = param
-
-	diff_f_data = []
-
-	for gly_cond in TIME_SAMPLES.keys():
-		data_sample_df = DATA_SAMPLES[gly_cond] # experimental data
-
-		init_conds = {'G_CYTO_INIT': 0,
-					  'H_CYTO_INIT': 0,
-					  'P_CYTO_INIT': 0,
-					  'G_EXT_INIT': data_sample_df[0,0],
-					  'H_EXT_INIT': 0,
-					  'P_EXT_INIT': data_sample_df[0,1],
-					  'CELL_CONC_INIT': DCW_TO_COUNT_CONC*scalar*data_sample_df[0,2]
-					  } # set initial conditions
-
-		tsamp = TIME_SAMPLES[gly_cond]
-		fvals = dhaB_dhaT_model.QoI(params_to_dict,init_conds,tsamp)
-		# compute difference for loglikelihood
-		fvals[:,2] = fvals[:,2]/(scalar*DCW_TO_COUNT_CONC)
-		sigma = np.array(sigma)
-		data_diff_matrix = (fvals-data_sample_df)/sigma[np.newaxis,:]
-		diff_f_data.extend(data_diff_matrix.ravel())
-	return -0.5*np.dot(diff_f_data,diff_f_data) 
-
-
-
-def main(argv, arc):
-	"""
-
-	@param argv:
-	@param arc:
-	@return:
-	"""
-	# get arguments 
-	nsamps = int(float(argv[1]))
-	sigma = [float(arg) for arg in argv[2:5]]
-	transform =argv[5]
-	dhaB_dhaT_model = DhaBDhaTModel(transform=transform)
-	lbda = float(argv[6])
-	adaptive = int(argv[7])
-	if adaptive:
-		beta = float(argv[8])
-
-	# set distributions
-	loglik_sigma = lambda params: loglik(params,dhaB_dhaT_model,sigma=sigma)
-	logpost = lambda params: loglik_sigma(params) + logprior(params, transform)
-	rprior_ds = lambda n: rprior(n, transform)
-
-	# set inital starting point
-	def initial_param():
-		file_name = 'MCMC_results_data/old_files/adaptive_lambda_0,01_beta_0,05_norm_nsamples_1000_sigma_[2,2,0,2]_date_2021_04_15_00_21_rank_0'
-		param_start = load_obj(file_name)[-1]
-		return param_start
-
- 	# if adaptive or fixed MCMC
-	if adaptive:
-		time_start = time.time()
-		tdraws = adaptive_postdraws(logpost, initial_param, nsamp=nsamps,beta=beta, lbda = lbda)
-		time_end = time.time()
-		print((time_end-time_start)/float(nsamps))
-	else:
-		time_start = time.time()
-		tdraws = postdraws(logpost, rprior_ds,initial_param,  nsamp=nsamps,lbda = lbda)
-		time_end = time.time()
-		print((time_end-time_start)/float(2*nsamps))
-	# store results
-	date_string = time.strftime("%Y_%m_%d_%H_%M")
-
-	# store images
-	for i,param_name in enumerate(VARS_TO_TEX.keys()):
-		plt.plot(range(int(nsamps)),tdraws[:,i])
-		plt.title('Plot of MCMC distribution of ' + r'$\log(' + VARS_TO_TEX[param_name][1:-1] + ')$')
-		plt.xlabel('iterations index')
-		plt.ylabel(r'$\log(' + VARS_TO_TEX[param_name][1:-1] + ')$')
-		if adaptive:
-			adapt_name = "adaptive"
-			folder_name = 'MCMC_results_plots/'+ adapt_name + "/sigma_"  + str(np.round(sigma,decimals=3)).replace('.',',').replace(' ','') +  "/" + "lambda_" + str(lbda).replace('.',',') + "_beta_" +  str(beta).replace('.',',') 
-		else:
-			adapt_name = "fixed"
-			folder_name = 'MCMC_results_plots/'+ adapt_name + "/sigma_"  + str(np.round(sigma,decimals=3)).replace('.',',').replace(' ','') +  "/" + "lambda_" + str(lbda).replace('.',',') 
-
-		folder_name += "/nsamples_" + str(nsamps) +"/" + transform[4:] + "/param_" + param_name
-		Path(folder_name).mkdir(parents=True, exist_ok=True)
-		file_name = folder_name +'/date_'+date_string  + "_rank_" + str(rank)+ '.png'
-		plt.savefig(file_name,bbox_inches='tight')
-		plt.close()
-
-	# save pickle data
-	if adaptive:
-		adapt_name = "adaptive"
-		folder_name = 'MCMC_results_data/' + adapt_name + "/sigma_"  + str(np.round(sigma,decimals=3)).replace('.',',').replace(' ','') +  "/" + "lambda_" + str(lbda).replace('.',',') + "_beta_" +  str(beta).replace('.',',') 
-	else:
-		adapt_name = "fixed"
-		folder_name ='MCMC_results_data/' + adapt_name + "/sigma_"  + str(np.round(sigma,decimals=3)).replace('.',',').replace(' ','') + "/"+  "lambda_" + str(lbda).replace('.',',')
-	
-	folder_name += "/nsamples_" + str(nsamps) +"/" + transform[4:]
-	Path(folder_name).mkdir(parents=True, exist_ok=True)
-	file_name = folder_name + "/date_" +date_string  + "_rank_" + str(rank)
-	save_obj(tdraws,file_name)
-
-
-if __name__ == '__main__':
-	main(sys.argv, len(sys.argv))
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/constants.py
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/constants.py b/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/constants.py
deleted file mode 100644
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/constants.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ /dev/null	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
@@ -1,88 +0,0 @@
-"""
-Constants parameters 
-
-Programme written by aarcher07
-Editing History:
-- 1/3/21
-"""
-
-import numpy as np
-import pandas as pd
-import scipy.stats as stats
-
-HRS_TO_SECS = 60*60
-DCW_TO_COUNT_CONC = 3.2e9/1e-3
-
-
-MODEL_PARAMETER_LIST = ['cellperGlyMass',
-                  'PermCellGlycerol','PermCellPDO','PermCell3HPA',
-                  'VmaxfDhaB', 'KmDhaBG', #'KmDhaBH',
-                  'VmaxfDhaT','KmDhaTH',
-                  'VmaxfGlpK','KmGlpKG']
-
-QoI_PARAMETER_LIST = ['cellperGlyMass', 'scalar',
-                        'PermCellGlycerol','PermCellPDO','PermCell3HPA',
-                        'VmaxfDhaB', 'KmDhaBG', #'KmDhaBH',
-                        'VmaxfDhaT','KmDhaTH',
-                        'VmaxfGlpK','KmGlpKG']
-
-VARIABLE_INIT_NAMES = ['G_CYTO_INIT', 'H_CYTO_INIT','P_CYTO_INIT',
-                       'G_EXT_INIT', 'H_EXT_INIT','P_EXT_INIT',
-                       'CELL_CONC_INIT']
-
-
-VARS_TO_TEX = {'scalar': r'$\alpha$',
-                'cellperGlyMass' : r'$\gamma$',
-                'PermCellGlycerol':r'$P_G$',
-                'PermCellPDO':r'$P_P$',
-                'PermCell3HPA':r'$P_H$',
-                'VmaxfDhaB': r'$V_{\text{max},\text{dhaB}}$',
-                'KmDhaBG': r'$K_{\text{M},\text{dhaB}}^G$',
-                # 'KmDhaBH': r'$K_{\text{M},\text{dhaB}}^H$',
-                'VmaxfDhaT': r'$V_{\text{max},\text{dhaT}}$',
-                'KmDhaTH': r'$K_{\text{M},\text{dhaT}}^H$',
-                'VmaxfGlpK': r'$V_{\text{max},\text{glpK}}$',
-                'KmGlpKG': r'$K_{\text{M},\text{glpK}}^G$',
-                }
-
-VARS_TO_UNITS = {'scalar': '',
-                'cellperGlyMass': '',
-                'PermCellGlycerol':'m/s',
-                'PermCellPDO':'m/s',
-                'PermCell3HPA':'m/s',
-                'VmaxfDhaB': 'mM/s',
-                'KmDhaBG': 'mM',
-                # 'KmDhaBH': 'mM',
-                'VmaxfDhaT': 'mM/s',
-                'KmDhaTH': 'mM',
-                'VmaxfGlpK': 'mM/s',
-                'KmGlpKG': 'mM'}
-
-# LOG NORM PARAMETERS 95\% BOUNDS
-
-LOG_PARAMETERS_BOUNDS = {'scalar': [-1., 1.],
-                          'cellperGlyMass': np.log10([1e4, 1e12]),
-                          'PermCellGlycerol': np.log10([1e-8, 1e-2]),
-                          'PermCellPDO': np.log10([1e-6, 1e-2]),
-                          'PermCell3HPA': np.log10([1e-4, 1e-2]),
-                          'VmaxfDhaB': np.log10([1e-3, 1e6]),
-                          'KmDhaBG': np.log10([1e-4 , 1e2]),
-                          'VmaxfDhaT': np.log10([1e-3,1e6]),
-                          'KmDhaTH': np.log10([1e-4 , 1e2]),
-                          'VmaxfGlpK': np.log10([1e-3,1e6]),
-                          'KmGlpKG': np.log10([1e-4,1e2])}
-
-PARAMETER_BOUNDS = {key: (10.**np.array(val)).tolist() for key, val in LOG_PARAMETERS_BOUNDS.items()}
-
-INIT_CONDS_GLY_PDO_DCW = {50:  [48.4239274209863, 0.861642364731331,0.060301507537688],
-                         60: [57.3451166180758, 1.22448979591837, 0.100696991929568],
-                         70: [72.2779071192256, 1.49001347874035, 0.057971014492754],
-                         80: [80.9160305343512, 1.52671755725191, 0.07949305141638]}
-
-TIME_EVALS = pd.read_csv("data_time_series_cleaned.csv")["Time"].to_numpy()
-TIME_EVALS = np.sort(np.unique(TIME_EVALS))
-DATA_COLUMNS = [3,5,6]
-
-EXTERNAL_VOLUME = 0.002
-
-NPARAMS = len(QoI_PARAMETER_LIST) + len(INIT_CONDS_GLY_PDO_DCW[50])
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/dhaB_dhaT_model.py
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/dhaB_dhaT_model.py b/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/dhaB_dhaT_model.py
deleted file mode 100644
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/dhaB_dhaT_model.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ /dev/null	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
@@ -1,402 +0,0 @@
-'''
-The DhaB-DhaT model contains DhaB-DhaT reaction pathway
-in the MCP; diffusion in the cell; diffusion from the cell 
-in the external volume.
-
-This model is currently in use. The DhaB-DhaT model assumes that there 
-are M identical MCPs within the cytosol and N identical cells within the 
-external volume. From time scsle analysis, gradients in cell are removed.
-
-Programme written by aarcher07
-Editing History:
-- 28/10/20
-'''
-
-
-import numpy as np
-from scipy.integrate import solve_ivp
-from scipy.optimize import fsolve
-import scipy.constants as constants
-import sympy as sp
-import scipy.sparse as sparse
-import pdb
-import time
-import matplotlib.pyplot as plt
-from sklearn.metrics import auc
-from constants import *
-from misc_functions import *
-import sys
-
-class DhaBDhaTModel:
-
-    def __init__(self, rc = 0.375e-6, lc = 2.47e-6,
-                 external_volume = 0.002, transform = ''):
-        """
-        Initializes parameters to be used numerial scheme
-        :param params:
-        :param external_volume:
-        :param rc: Radius of cell in metres
-        :param lc: length of the cell in metres (needed if assuming cells are rods)
-        :param rm: Radius of MCP in metres
-        :param ncells: number of cells
-        :param cellular geometry: "sphere" or "rod" (cylinders with hemispherical ends)
-        """
-        # Integration Parameters
-        self.rc = rc
-        self.lc = lc
-        self.external_volume = external_volume
-        self.nvars = 2*3 + 1
-
-        self.cell_volume = (4*np.pi/3)*(self.rc)**3 + (np.pi)*(self.lc - 2*self.rc)*((self.rc)**2)
-        self.cell_surface_area = 2*np.pi*self.rc*self.lc
-        self.nparams_sens = len(MODEL_PARAMETER_LIST)
-        self.transform_name = transform
-        # differential equation parameters
-        self._set_param_sp_symbols()
-        self._set_sens_vars()
-        self._set_symbolic_state_vars()
-
-        if transform == 'log_unif_prior':
-            self.ds = self._sderiv_log_unif_prior
-        elif transform == 'log_norm_prior':
-            self.ds = self._sderiv_log_norm_prior
-        elif transform == 'log_unif_bounds':
-            self.ds = self._sderiv_log_unif_bounds
-        elif transform == '':
-            self.ds = self._sderiv
-        else:
-            raise ValueError('Unknown transform')
-        self._set_fun_sderiv_jac_statevars()
-        #self._set_fun_sderiv_jac_params()
-        #self._create_jac_sens()
-
-    def _set_symbolic_state_vars(self):
-        """
-        Generates the symbol state variables for the model
-        """
-        self.x_sp = np.array(sp.symbols('x:' + str(self.nvars)))
-
-    def _set_param_sp_symbols(self):
-        """
-        sets dictionary of parameters to be analyzed using sensitivity analysis
-        """
-        self.params_sens_sp_dict = {name:sp.symbols(name) for name in MODEL_PARAMETER_LIST}
-        self.params_sens_sp = list((self.params_sens_sp_dict).values())
-
-    def _set_sens_vars(self):
-        """
-        creates a list of sympy symbols for the derivative of each state vector
-        wrt to parameters
-        """
-
-        self.n_sensitivity_eqs = self.nvars * self.nparams_sens
-        #sensitivity variables
-        self.sensitivity_sp = np.array(list(sp.symbols('s0:' + str(self.n_sensitivity_eqs))))
-
-    def _sderiv(self,t,x,params=None):
-        """
-        Computes the spatial derivative of the system at time point, t
-        :param t: time
-        :param x: state variables
-        :param params: parameter list
-        """
-
-        if params is None:
-            if not self.params:
-                print("Parameters have not been set.")
-                return
-            params = self.params
-
-        ###################################################################################
-        ################################# Initialization ##################################
-        ###################################################################################
-     
-
-        # Integration Parameters
-        assert len(x) == self.nvars
-        # differential equation parameters
-        d = np.zeros((len(x))).tolist()  # convert to list to allow use of symbolic derivatives
-        n_compounds_cell = 3
-
-        #cell growth
-        d[6] =  (-params['KmGlpKG']*x[6] - x[6]*x[0] + sp.sqrt(4*params['KmGlpKG']*params['VmaxfGlpK']*params['cellperGlyMass']*x[6]*x[0] +(params['KmGlpKG']*x[6]+x[6]*x[0])**2 ))/(2*params['KmGlpKG'])
-        #params['VmaxfGlpK']*ratio*x[0]/(params['KmGlpKG'] + ratio*x[0]) #params['maxGrowthRate'] * x[3] /(params['saturationConstant'] + x[3])
-        ratio = 1/(1+d[6]/x[6])
-        
-
-        ###################################################################################
-        ################################# cytosol reactions ###############################
-        ###################################################################################
-
-
-        PermCellGlycerol = params['PermCellGlycerol']
-        PermCell3HPA = params['PermCell3HPA']
-        PermCellPDO  = params['PermCellPDO']
-
-        R_DhaB = params['VmaxfDhaB']*ratio*x[0] / (params['KmDhaBG'] + ratio*x[0]) #+ (ratio*x[1])/params['KmDhaBH']) 
-        R_DhaT = params['VmaxfDhaT']*ratio*x[1]/(params['KmDhaTH'] + ratio*x[1]) 
-        R_GlpK = params['VmaxfGlpK']*ratio*x[0]/(params['KmGlpKG'] + ratio*x[0])
-
-        cell_area_volume = self.cell_surface_area/self.cell_volume
-
-        
-        d[0] = -R_DhaB -R_GlpK + cell_area_volume * PermCellGlycerol * (x[0 + n_compounds_cell] - ratio*x[0])  # microcompartment equation for G
-        d[1] =  R_DhaB -  R_DhaT + cell_area_volume * PermCell3HPA * (x[1 + n_compounds_cell] - ratio*x[1])  # microcompartment equation for H
-        d[2] = R_DhaT + cell_area_volume * PermCellPDO * (x[2 + n_compounds_cell] - ratio*x[2])  # microcompartment equation for P
-
-
-        #####################################################################################
-        ######################### external volume equations #################################
-        #####################################################################################
-        d[3] = x[-1] * self.cell_surface_area * PermCellGlycerol * (ratio*x[3 - n_compounds_cell] - x[3]) 
-        d[4] = x[-1] * self.cell_surface_area * PermCell3HPA * (ratio*x[4 - n_compounds_cell] - x[4]) 
-        d[5] = x[-1] * self.cell_surface_area * PermCellPDO * (ratio*x[5 - n_compounds_cell] - x[5]) 
-        return d
-
-    def _sderiv_log_unif_bounds(self,t,x,log_params):
-        """
-        Computes the spatial derivative of the system at time point, t, with the parameters
-        [-1,1] transformed by transforming parameters into their original values in LOG_PARAMETER_BOUNDS
-        :param t: time
-        :param x: state variables
-        :param params_sens: [-1,1] transformed parameter list
-        """
-        if log_params is None:
-            print("Please set the parameter values")
-        params = transform_from_log_unif_bounds(log_params)
-
-        return self._sderiv(t,x,params)
-
-    def _set_symbolic_sderiv(self):
-        """
-        Generates the symbol differential equation
-        """
-        x_sp = getattr(self, 'x_sp', None)
-        if x_sp is None:
-            self._set_symbolic_state_vars()
-        self.sderiv_symbolic = self.ds(0,self.x_sp,self.params_sens_sp_dict)
-
-
-    def _set_fun_sderiv_jac_statevars(self):
-        """
-        Generates the symbol jacobian of the differential equation 
-        wrt state variables
-        """
-        sderiv_symbolic = getattr(self, 'sderiv_symbolic', None)
-        if sderiv_symbolic is None:
-            self._set_symbolic_sderiv()
-            sderiv_symbolic = self.sderiv_symbolic
-        self.sderiv_jac_state_vars_sp = sp.Matrix(sderiv_symbolic).jacobian(self.x_sp)
-        sderiv_jac_state_vars_fun_lam = sp.lambdify((self.x_sp,self.params_sens_sp), self.sderiv_jac_state_vars_sp, 'numpy')
-        self.sderiv_jac_state_vars_fun = lambda t,x,params_sens_dict: sderiv_jac_state_vars_fun_lam(x,params_sens_dict.values())
-    
-
-    def _set_fun_sderiv_jac_params(self):
-        """
-        Computes the jacobian of the spatial derivative wrt concentrations (state variables)
-        and parameters from create_param_symbols
-        """
-
-        # SDeriv with param vals and symbols
-        sderiv_symbolic = getattr(self, 'sderiv_symbolic', None)
-        if sderiv_symbolic is None:
-            self._set_symbolic_sderiv()
-            sderiv_symbolic = self.sderiv_symbolic
-        
-        # derivative of rhs wrt params
-        self.sderiv_jac_params_sp = sp.Matrix(sderiv_symbolic).jacobian(self.params_sens_sp)
-        sderiv_jac_params_fun_lam = sp.lambdify((self.x_sp,self.params_sens_sp), self.sderiv_jac_params_sp,'numpy')
-        self.sderiv_jac_params_fun = lambda t,x,params_sens_dict: sderiv_jac_params_fun_lam(x,params_sens_dict.values())
-
-
-    def dsens(self,t,xs,params_sens_dict=None):
-        """
-        Compute RHS of the sensitivity equation
-
-        :param t: time
-        :param xs: state variables and sensitivity variables
-        :param params_sens_dict: dictionary of param values whose sensitivities are being studied
-        """
-
-        if params_sens_dict is None:
-            print("Please set the parameter values for local sensitivity analysis")
-
-        assert set(MODEL_PARAMETER_LIST) == set(list(params_sens_dict.keys()))
-
-        # reorder params_sens_dict if necessary
-        if MODEL_PARAMETER_LIST != list(params_sens_dict.keys()):
-            sys.exit("The internal parameter sensitivity list and the given parameter list do not correspond")
-            # params_sens_dict_sorted = {param_name:params_sens_dict[param_name] for param_name in self.params_sens_list}
-            # params_sens_dict = params_sens_dict_sorted
-
-
-        # get state varible and sensitivities
-        x = xs[:self.nvars]
-        s = xs[self.nvars:]
-        dxs = []
-        dxs.extend(self.ds(t, x, params_sens=params_sens_dict))
-
-        # compute rhs of sensitivity equations
-        sderiv_jac_params_fun_mat = self.sderiv_jac_params_fun(t,x,params_sens_dict)
-        sderiv_jac_conc_mat = self.sderiv_jac_state_vars_fun(t,x,params_sens_dict)
-
-        for i in range(self.nvars):
-            for j in range(self.nparams_sens):
-                dxs.append(np.dot(sderiv_jac_conc_mat[i,:], s[range(j,self.n_sensitivity_eqs,self.nparams_sens)])
-                           + sderiv_jac_params_fun_mat[i,j])
-        return dxs
-
-
-    def _create_jac_sens(self):
-        """
-        set compute jacobian of the sensitivity equation
-        """
-
-        # create state variables
-        xs_sp = np.concatenate((self.x_sp,self.sensitivity_sp))
-        dsens_sym = sp.Matrix(self.dsens(0,xs_sp,self.params_sens_sp_dict))
-        dsens_sym_jac = dsens_sym.jacobian(xs_sp)
-
-        # generate jacobian
-        dsens_jac_dense_mat_fun = sp.lambdify((xs_sp,self.params_sens_sp),dsens_sym_jac)
-        dsens_jac_sparse_mat_fun = lambda t,xs,params_sens_dict: sparse.csr_matrix(dsens_jac_dense_mat_fun(xs,params_sens_dict.values()))
-        self._dsens_jac_sparse_mat_fun = dsens_jac_sparse_mat_fun
-
-    def dsens_jac(self,t,xs,params_sens_dict=None):
-        """
-        Computes the jacobian of the RHS of the sensitivity equation
-
-        :param t: time
-        :param xs: state variables and sensitivity variables
-        :param params_sens_dict: dictionary of param values whose sensitivities are being studied
-        """
-
-        if params_sens_dict is None:
-            print("Please set the parameter values")
-
-        assert set(MODEL_PARAMETER_LIST) == set(list(params_sens_dict.keys()))
-
-        # reorder params_sens_dict if necessary
-        if MODEL_PARAMETER_LIST != list(params_sens_dict.keys()):
-            sys.exit("The internal parameter sensitivity list and the given parameter list do not correspond")
-            # params_sens_dict_sorted = {param_name:params_sens_dict[param_name] for param_name in self.params_sens_list}
-            # params_sens_dict = params_sens_dict_sorted
-
-        return self._dsens_jac_sparse_mat_fun(t,xs,params_sens_dict)
-
-def main():
-    external_volume = 0.002
-
-    params_trans = {'cellperGlyMass': 10**(5.73158464),
-                'PermCellGlycerol': 10**(-3.55285234),
-                'PermCellPDO': 10**(-3.85344833),
-                'PermCell3HPA': 10**(-2.34212333),
-                'VmaxfDhaB': 10**(3.26266939), 
-                'KmDhaBG': 10**(0.71152905) ,
-                'VmaxfDhaT': 10**(2.85561206),
-                'KmDhaTH': 10**(0.69665821),
-                'VmaxfGlpK':10**(1.99560497) ,
-                'KmGlpKG': 10**(-1.24867452)}
-
-    init_conds={'G_CYTO_INIT': 0, 
-                'H_CYTO_INIT': 0,
-                'P_CYTO_INIT': 0,
-                'G_EXT_INIT': INIT_CONDS_GLY_PDO_DCW[50][0], 
-                'H_EXT_INIT': INIT_CONDS_GLY_PDO_DCW[50][1],
-                'P_EXT_INIT': 0,
-                'CELL_CONC_INIT': INIT_CONDS_GLY_PDO_DCW[50][2]*0.5217871564671509*DCW_TO_COUNT_CONC
-                }
-
-    ds='log_norm'
-
-    
-    if ds == 'log_unif':
-        params = transform_to_log_unif(params_trans)
-    elif ds == 'log_norm':
-        params = transform_to_log_norm(params_trans)
-    else:
-        params = params_trans
-
-    dhaB_dhaT_model = DhaBDhaTModel(external_volume=external_volume, transform=ds)
-
-    mintime = 10**(-15)
-    fintime = 12*60*60
-
-    #################################################
-    # Integrate with BDF
-    #################################################
-
-
-    # initial conditions
-    n_compounds_cell = 3
-    y0 = np.zeros(dhaB_dhaT_model.nvars)
-    for i,init_names in enumerate(VARIABLE_INIT_NAMES):
-        y0[i] = init_conds[init_names]  
-
-    tol = 1e-7
-    nsamples = 500
-    timeorig = np.logspace(np.log10(mintime), np.log10(fintime), nsamples)
-
-    ds = lambda t,x: dhaB_dhaT_model.ds(t,x,params)
-    ds_jac = lambda t,x: dhaB_dhaT_model.sderiv_jac_state_vars_fun(t,x,params)
-
-    sol = solve_ivp(ds,[0, fintime+1], y0, method = 'BDF', jac = ds_jac, t_eval=timeorig,
-                    atol=tol,rtol=tol)
-
-    print(sol.message)
-
-    #################################################
-    # Plot solution
-    #################################################
-    volcell = dhaB_dhaT_model.cell_volume
-    colour = ['b','r','y','c','m']
-
-    # rescale the solutions
-    ncompounds = 3
-    timeorighours = sol.t/HRS_TO_SECS
-    print(sol.message)
-
-
-    # external solution
-    for i in range(0,3):
-        yext = sol.y[3+i,:].T
-        plt.plot(timeorighours,yext, colour[i])
-
-    plt.legend(['Glycerol','3-HPA','1,3-PDO'],loc='upper right')
-    plt.title('Plot of external concentration')
-    plt.xlabel('time (hr)')
-    plt.ylabel('concentration (mM)')
-    plt.show()
-
-    #cell solutions
-    for i in range(3):
-        ymcp = sol.y[i,:].T
-        plt.plot(timeorighours,ymcp, colour[i])
-
-
-    plt.legend(['Glycerol','3-HPA','1,3-PDO'],loc='upper right')
-    plt.title('Plot of cytosol concentrations')
-    plt.xlabel('time (hr)')
-    plt.ylabel('concentration (mM)')
-    plt.show()
-
-    plt.plot(timeorighours,sol.y[-1,:].T/((10**-0.3531)*DCW_TO_COUNT_CONC), colour[i])
-    plt.title('Plot of cell concentration')
-    plt.xlabel('time (hr)')
-    plt.ylabel('concentration (cell per m^3)')
-    plt.show()
-
-
-    #check mass balance
-    ext_masses_org = y0[3:6]* external_volume
-    cell_masses_org = y0[:3] * volcell 
-
-
-    ext_masses_fin = sol.y[3:6, -1] * external_volume
-    cell_masses_fin = sol.y[:3,-1] * volcell
-    print(ext_masses_fin)
-    print(ext_masses_org.sum() + external_volume*y0[-1]*cell_masses_org.sum())
-    print(ext_masses_fin.sum() + external_volume*sol.y[-1,-1]*cell_masses_fin.sum())
-    print(sol.y[-1,-1])
-if __name__ == '__main__':
-    main()
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/dhaB_dhaT_model_prior.py
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/dhaB_dhaT_model_prior.py b/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/dhaB_dhaT_model_prior.py
deleted file mode 100644
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/dhaB_dhaT_model_prior.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ /dev/null	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
@@ -1,228 +0,0 @@
-'''
-The DhaB-DhaT model contains DhaB-DhaT reaction pathway
-in the MCP; diffusion in the cell; diffusion from the cell 
-in the external volume.
-
-This model is currently in use. The DhaB-DhaT model assumes that there 
-are M identical MCPs within the cytosol and N identical cells within the 
-external volume. From time scsle analysis, gradients in cell are removed.
-
-Programme written by aarcher07
-Editing History:
-- 28/10/20
-'''
-
-from scipy.integrate import solve_ivp
-import matplotlib.pyplot as plt
-from misc_functions import *
-from base_dhaB_dhaT_model import DhaBDhaTModel
-
-
-class DhaBDhaTModelMCMC(DhaBDhaTModel):
-    def __init__(self, rc = 0.375e-6, lc = 2.47e-6,
-                 external_volume = 0.002, transform = ''):
-        """
-        Initializes parameters to be used numerial scheme
-        :param rc: Radius of cell in metres
-        :param lc: length of the cell in metres (needed if assuming cells are rods)
-        :param external_volume: external volume containing cells in metres^3
-        :param transform: transform of the parameters, log10, log10 and standardized, no transform
-        """
-        # Integration Parameters
-        super().__init__(rc, lc,external_volume)
-        self.transform_name = transform
-        if transform == 'log_unif':
-            self._sderiv = self._sderiv_log_unif
-        elif transform == 'log_norm':
-            self._sderiv = self._sderiv_log_norm
-        elif transform == '':
-            pass
-        else:
-            raise ValueError('Unknown transform')
-        self._set_fun_sderiv_jac_statevars()
-
-    def _sderiv_log_unif_prior(self,t,x,log_params):
-        """
-        Computes the spatial derivative of the system at time point, t, with the parameters
-        [-1,1] transformed by transforming parameters into their original values in LOG_UNIF_PRIOR_PARAMETERS
-        :param t: time
-        :param x: state variables
-        :param params_sens: [-1,1] transformed parameter list
-        """
-        if log_params is None:
-            print("Please set the parameter values")
-        params = transform_from_log_unif(log_params)
-
-        return super()._sderiv(t,x,params)
-
-    def _sderiv_log_norm_prior(self,t,x,log_params):
-        """
-        Computes the spatial derivative of the system at time point, t, with the parameters
-        [-1,1] transformed by transforming parameters into their original values in LOG_NORM_PRIOR_PARAMETERS
-        :param t: time
-        :param x: state variables
-        :param params_sens:  transformed normal parameter list
-        """
-        if log_params is None:
-            print("Please set the parameter values")
-        params = transform_from_log_norm(log_params)
-
-        return super()._sderiv(t,x,params)
-
-    def generate_QoI_time_series(self,params,tsamples=TIME_EVALS,tol = 10**-5):
-        """
-        Generate QoI time series for all experimental conditions
-        @param params: dictionary parameter values to run the model. keys of the dictionary are in model_constants.py
-        @param tsamples: time samples to collect external glycerol, external 1,3-PDO and DCW
-        @param tol: tolerance at which integrate the DhaBDhaTModel
-        @return: glycerol, external 1,3-PDO and DCW sampled at time samples, tsamples (3*|tsamples|*|experimental conditions| vector)
-        """
-
-        #CALIBRATION CONSTANT
-        if self.transform_name == 'log_unif':
-            bound_a,bound_b = LOG_UNIF_PRIOR_PARAMETERS['scalar']
-            scalar = 10**((bound_b - bound_a)*params[0] + bound_a)
-        elif dhaB_dhaT_model.transform_name == 'log_norm':
-            scalar = 10**(params[0])
-        else:
-            scalar= params[0]
-
-        # PARAMETERS FOR MODEL
-        params_to_dict = dict()
-        params_to_dict['scalar'] = scalar
-        for param,key in zip(params[1:], MODEL_PARAMETER_LIST):
-            params_to_dict[key] = param
-        f_data = []
-
-        # generate model for each experiemental initial condition
-        for conds in INIT_CONDS_GLY_PDO_DCW.values():
-            init_conds = {'G_CYTO_INIT': 0,
-                          'H_CYTO_INIT': 0,
-                          'P_CYTO_INIT': 0,
-                          'G_EXT_INIT': conds[0],
-                          'H_EXT_INIT': 0,
-                          'P_EXT_INIT': conds[1],
-                          'CELL_CONC_INIT': DCW_TO_COUNT_CONC*scalar*conds[2]
-                        }
-
-            fvals = self.QoI(params_to_dict, init_conds, tsamples, tol)
-            # compute difference for loglikelihood
-            f_data.append(fvals.flatten('F'))
-
-        return f_data
-def main():
-    external_volume = 0.002
-
-    params_trans = {'cellperGlyMass': 10**(5.73158464),
-                'PermCellGlycerol': 10**(-3.55285234),
-                'PermCellPDO': 10**(-3.85344833),
-                'PermCell3HPA': 10**(-2.34212333),
-                'VmaxfDhaB': 10**(3.26266939), 
-                'KmDhaBG': 10**(0.71152905) ,
-                'VmaxfDhaT': 10**(2.85561206),
-                'KmDhaTH': 10**(0.69665821),
-                'VmaxfGlpK':10**(1.99560497) ,
-                'KmGlpKG': 10**(-1.24867452)}
-
-    init_conds={'G_CYTO_INIT': 0, 
-                'H_CYTO_INIT': 0,
-                'P_CYTO_INIT': 0,
-                'G_EXT_INIT': INIT_CONDS_GLY_PDO_DCW[50][0], 
-                'H_EXT_INIT': INIT_CONDS_GLY_PDO_DCW[50][1],
-                'P_EXT_INIT': 0,
-                'CELL_CONC_INIT': INIT_CONDS_GLY_PDO_DCW[50][2]*0.5217871564671509*DCW_TO_COUNT_CONC
-                }
-
-    ds='log_norm'
-
-    
-    if ds == 'log_unif':
-        params = transform_to_log_unif(params_trans)
-    elif ds == 'log_norm':
-        params = transform_to_log_norm(params_trans)
-    else:
-        params = params_trans
-
-    dhaB_dhaT_model = DhaBDhaTModel(external_volume=external_volume, transform=ds)
-
-    mintime = 10**(-15)
-    fintime = 12*60*60
-
-    #################################################
-    # Integrate with BDF
-    #################################################
-
-
-    # initial conditions
-    n_compounds_cell = 3
-    y0 = np.zeros(dhaB_dhaT_model.nvars)
-    for i,init_names in enumerate(VARIABLE_INIT_NAMES):
-        y0[i] = init_conds[init_names]  
-
-    tol = 1e-7
-    nsamples = 500
-    timeorig = np.logspace(np.log10(mintime), np.log10(fintime), nsamples)
-
-    ds = lambda t,x: dhaB_dhaT_model.ds(t,x,params)
-    ds_jac = lambda t,x: dhaB_dhaT_model.sderiv_jac_state_vars_fun(t,x,params)
-
-    sol = solve_ivp(ds,[0, fintime+1], y0, method = 'BDF', jac = ds_jac, t_eval=timeorig,
-                    atol=tol,rtol=tol)
-
-    print(sol.message)
-
-    #################################################
-    # Plot solution
-    #################################################
-    volcell = dhaB_dhaT_model.cell_volume
-    colour = ['b','r','y','c','m']
-
-    # rescale the solutions
-    ncompounds = 3
-    timeorighours = sol.t/HRS_TO_SECS
-    print(sol.message)
-
-
-    # external solution
-    for i in range(0,3):
-        yext = sol.y[3+i,:].T
-        plt.plot(timeorighours,yext, colour[i])
-
-    plt.legend(['Glycerol','3-HPA','1,3-PDO'],loc='upper right')
-    plt.title('Plot of external concentration')
-    plt.xlabel('time (hr)')
-    plt.ylabel('concentration (mM)')
-    plt.show()
-
-    #cell solutions
-    for i in range(3):
-        ymcp = sol.y[i,:].T
-        plt.plot(timeorighours,ymcp, colour[i])
-
-
-    plt.legend(['Glycerol','3-HPA','1,3-PDO'],loc='upper right')
-    plt.title('Plot of cytosol concentrations')
-    plt.xlabel('time (hr)')
-    plt.ylabel('concentration (mM)')
-    plt.show()
-
-    plt.plot(timeorighours,sol.y[-1,:].T/((10**-0.3531)*DCW_TO_COUNT_CONC), colour[i])
-    plt.title('Plot of cell concentration')
-    plt.xlabel('time (hr)')
-    plt.ylabel('concentration (cell per m^3)')
-    plt.show()
-
-
-    #check mass balance
-    ext_masses_org = y0[3:6]* external_volume
-    cell_masses_org = y0[:3] * volcell 
-
-
-    ext_masses_fin = sol.y[3:6, -1] * external_volume
-    cell_masses_fin = sol.y[:3,-1] * volcell
-    print(ext_masses_fin)
-    print(ext_masses_org.sum() + external_volume*y0[-1]*cell_masses_org.sum())
-    print(ext_masses_fin.sum() + external_volume*sol.y[-1,-1]*cell_masses_fin.sum())
-    print(sol.y[-1,-1])
-if __name__ == '__main__':
-    main()
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/misc_functions.py
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/misc_functions.py b/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/misc_functions.py
deleted file mode 100644
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/misc_functions.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ /dev/null	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
@@ -1,88 +0,0 @@
-from constants import *
-import pickle
-import numpy as np
-
-def transform_from_log_unif_prior(log_params):
-	params = {}
-	for param_name, param_val in log_params.items():
-		if param_name in LOG_UNIF_PRIOR_PARAMETERS.keys():
-			bound_a, bound_b = LOG_UNIF_PRIOR_PARAMETERS[param_name]
-			param_trans = (bound_b - bound_a)*param_val + bound_a 
-			params[param_name] = 10**param_trans
-		else:
-			params[param_name] = param_val
-	return params
-
-def transform_to_log_unif_prior(params):
-	log_params = {}
-	for param_name, param_val in params.items():
-		if param_name in LOG_UNIF_PRIOR_PARAMETERS.keys():
-			bound_a,bound_b = LOG_UNIF_PRIOR_PARAMETERS[param_name]
-			log_params[param_name] = (np.log10(param_val) - bound_a)/(bound_b - bound_a)
-		else:
-			log_params[param_name] = param_val
-	return log_params
-
-def transform_from_log_norm_prior(log_params):
-	params = {}
-	for param_name, param_val in log_params.items():
-		if param_name in LOG_NORM_PRIOR_PARAMETERS.keys():
-			params[param_name] = 10**param_val
-		else:
-			params[param_name] = param_val
-	return params
-
-def transform_to_log_norm_prior(params):
-	log_params = {}
-	for param_name, param_val in params.items():
-		if param_name in LOG_NORM_PRIOR_PARAMETERS.keys():
-			log_params[param_name] = np.log10(param_val)
-		else:
-			log_params[param_name] = param_val
-	return log_params
-
-def transform_from_log_unif_bounds(log_params):
-	params = {}
-	for param_name, param_val in log_params.items():
-		if param_name in LOG_PARAMETERS_BOUNDS.keys():
-			bound_a, bound_b = LOG_PARAMETERS_BOUNDS[param_name]
-			param_trans = (bound_b - bound_a)*param_val + bound_a
-			params[param_name] = 10**param_trans
-		else:
-			params[param_name] = param_val
-	return params
-
-def transform_to_log_unif_bounds(params):
-	log_params = {}
-	for param_name, param_val in params.items():
-		if param_name in LOG_PARAMETERS_BOUNDS.keys():
-			bound_a,bound_b = LOG_PARAMETERS_BOUNDS[param_name]
-			log_params[param_name] = (np.log10(param_val) - bound_a)/(bound_b - bound_a)
-		else:
-			log_params[param_name] = param_val
-	return log_params
-
-
-def load_obj(name):
-    """
-    Load a pickle file. Taken from
-    https://stackoverflow.com/questions/19201290/how-to-save-a-dictionary-to-a-file
-    :param name: Name of file
-    :return: the file inside the pickle
-    """
-    with open(name + '.pkl', 'rb') as f:
-        return pickle.load(f)
-
-
-def save_obj(obj, name):
-    """
-    Save a pickle file. Taken from
-    https://stackoverflow.com/questions/19201290/how-to-save-a-dictionary-to-a-file
-
-    :param  obj: object to save
-            name: Name of file
-    """
-    with open(name + '.pkl', 'wb') as f:
-        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)
-
-
Index: WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/dependency_links.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/dependency_links.txt b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/dependency_links.txt
new file mode 100644
--- /dev/null	(date 1622045462770)
+++ b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/dependency_links.txt	(date 1622045462770)
@@ -0,0 +1,1 @@
+
Index: WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/SOURCES.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/SOURCES.txt b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/SOURCES.txt
new file mode 100644
--- /dev/null	(date 1622045462770)
+++ b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/SOURCES.txt	(date 1622045462770)
@@ -0,0 +1,13 @@
+setup.py
+MCMC/MCMC.py
+MCMC/__init__.py
+MCMC/dhaB_dhaT_model_bayesian_funs.py
+MCMC/dhaB_dhaT_model_prior.py
+MCMC/prior_constants.py
+MCMC_class.egg-info/PKG-INFO
+MCMC_class.egg-info/SOURCES.txt
+MCMC_class.egg-info/dependency_links.txt
+MCMC_class.egg-info/top_level.txt
+test/test_MCMC.py
+test/test_dhaB_dhaT_model_bayesian_funs.py
+test/test_dhaB_dhaT_model_prior.py
\ No newline at end of file
Index: WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/PKG-INFO
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/PKG-INFO b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/PKG-INFO
new file mode 100644
--- /dev/null	(date 1622045462770)
+++ b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/PKG-INFO	(date 1622045462770)
@@ -0,0 +1,10 @@
+Metadata-Version: 1.0
+Name: MCMC-class
+Version: 0.1.0
+Summary: UNKNOWN
+Home-page: UNKNOWN
+Author: Andre Archer
+Author-email: andrearcher2017@u.northwestern.edu
+License: UNKNOWN
+Description: UNKNOWN
+Platform: UNKNOWN
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/prior_constants.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/prior_constants.py b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/prior_constants.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/prior_constants.py
rename to WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/prior_constants.py
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/prior_constants.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/prior_constants.py	(date 1622045462810)
@@ -22,8 +22,21 @@
                         'VmaxfDhaT': np.log10([5e-1,5e2]),
                         'KmDhaTH': np.log10([1e-2 , 1e2]),
                         'VmaxfGlpK': np.log10([1e-2,1e3]),
-                             'KmGlpKG': np.log10([1e-3,1e-1])}
+                        'KmGlpKG': np.log10([1e-3,1e-1])}
 
+UNIF_PRIOR_PARAMETERS = {'scalar': [1e-1, 1e1],
+                        'cellperGlyMass': [1e4, 1e12],
+                        'PermCellGlycerol': [1e-8, 1e-2],
+                        'PermCellPDO': [1e-6, 1e-2],
+                        'PermCell3HPA': [1e-3, 1e-2],
+                        'VmaxfDhaB': [5e0, 5e3],
+                        'KmDhaBG': [1e-1 , 1e1],
+                             # 'KmDhaBH': [1e-1 , 1e2],
+                        'VmaxfDhaT': [5e-1,5e2],
+                        'KmDhaTH': [1e-2 , 1e2],
+                        'VmaxfGlpK': [1e-2,1e3],
+                        'KmGlpKG': [1e-3,1e-1]}
+
 LOG_NORM_PRIOR_PARAMETERS = {'scalar': [np.log10(0.5), (1 / 8.) ** 2],
                             'cellperGlyMass': [8, 2**2],
                             'PermCellGlycerol': [-5,(3/2.)**2],
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/dhaB_dhaT_model_prior.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/dhaB_dhaT_model_prior.py b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/dhaB_dhaT_model_prior.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/dhaB_dhaT_model_prior.py
rename to WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/dhaB_dhaT_model_prior.py
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/dhaB_dhaT_model_prior.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/dhaB_dhaT_model_prior.py	(date 1622045462810)
@@ -11,12 +11,11 @@
 Editing History:
 - 28/10/20
 '''
-import sys
-sys.path.insert(0, '.')
+
 from base_dhaB_dhaT_model.dhaB_dhaT_model import DhaBDhaTModel
-from base_dhaB_dhaT_model.misc_functions import *
-from base_dhaB_dhaT_model.data_set_constants import *
-from prior_constants import *
+from base_dhaB_dhaT_model.misc_functions import transform_from_log_unif, transform_from_log_norm
+from base_dhaB_dhaT_model.data_set_constants import TIME_EVALS
+from .prior_constants import LOG_UNIF_PRIOR_PARAMETERS
 
 class DhaBDhaTModelMCMC(DhaBDhaTModel):
     def __init__(self, rc = 0.375e-6, lc = 2.47e-6,
@@ -75,7 +74,7 @@
          1,3-PDO and cell concentration time samples, tsamples
         @param params: dictionary parameter values to run the model. keys of the dictionary are in model_constants.py
         @param init_conds: dictionary initial conditions to run the model. keys of the dictionary are in model_constants
-        @param base_dhaB_dhaT_model: instance of the DhaBDhaTModel class
+        @param base_dhaB_dhaT_model: instance of the DhaBDhaTModelMCMC class
         @param tsamples: time samples to collect external glycerol, external 1,3-PDO and DCW
         @param tol: tolerance at which integrate the DhaBDhaTModel
         @return: glycerol, external 1,3-PDO and DCW sampled at time samples, tsamples (3 x |tsamples| matrix)
Index: WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/dhaB_dhaT_model_bayesian_funs.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/dhaB_dhaT_model_bayesian_funs.py b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/dhaB_dhaT_model_bayesian_funs.py
new file mode 100644
--- /dev/null	(date 1622045462766)
+++ b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/dhaB_dhaT_model_bayesian_funs.py	(date 1622045462766)
@@ -0,0 +1,103 @@
+from .MCMC import postdraws,adaptive_postdraws
+from base_dhaB_dhaT_model.data_set_constants import TIME_SAMPLES, DATA_SAMPLES
+from base_dhaB_dhaT_model.model_constants import MODEL_PARAMETER_LIST,DCW_TO_COUNT_CONC
+from .prior_constants import LOG_UNIF_PRIOR_PARAMETERS,LOG_NORM_PRIOR_PARAMETERS,UNIF_PRIOR_PARAMETERS
+import time
+import numpy as np
+import scipy.stats as stats
+from pathlib import Path
+
+def rprior(n,transform):
+	"""
+	Generate n samples for the the prior distribution
+	@param n: number of samples
+	@param transform: "log_unif"- log uniform distribution of parameters, "log_norm" - log normal distribution,
+						" " - uniform distributioon
+	@return: n samples of the prior distribution
+	"""
+	samples = []
+	if transform == "log_unif":
+		for key,vals in LOG_UNIF_PRIOR_PARAMETERS.items():
+			samples.append(stats.uniform.rvs(size=n))
+	elif transform == "log_norm":
+		for key,vals in LOG_NORM_PRIOR_PARAMETERS.items():
+			samples.append(stats.norm.rvs(loc=vals[0],scale=vals[1],size=n))			
+	else:
+		for key,vals in UNIF_PRIOR_PARAMETERS.items():
+			samples.append(stats.loguniform.rvs(a=vals[0],b=vals[1],size=n))		
+	return np.array(samples).T
+
+
+def logprior(params,transform):
+	"""
+	Computes the loglikelihood of the prior distribution
+	@param params: parameter values
+	@param transform: "log_unif"- log uniform distribution of parameters, "log_norm" - log normal distribution,
+						" " - uniform distribution
+	@return: log likelihood
+	"""
+	logpdf = 0
+	if transform == "log_unif":
+		for i,(key,vals) in enumerate(LOG_UNIF_PRIOR_PARAMETERS.items()):
+			logpdf += stats.uniform.logpdf(params[i])
+	elif transform == "log_norm":
+		for i,(key,vals) in enumerate(LOG_NORM_PRIOR_PARAMETERS.items()):
+			logpdf += stats.norm.logpdf(params[i],loc=vals[0],scale=vals[1])				
+	elif transform == " ":
+		for i,(key,vals) in enumerate(UNIF_PRIOR_PARAMETERS.items()):
+			logpdf += stats.loguniform.logpdf(params[i],a=vals[0],b=vals[1])
+	else:
+		raise ValueError('Unknown transform')
+	return logpdf
+
+def loglik(params,dhaB_dhaT_model,sigma=[2,2,0.1]):
+	"""
+	Computes the log likelihood Gaussian
+	@param params: parameters for the model
+	@param dhaB_dhaT_model: instance of the DhaBDhaTModel class
+	@param sigma: standard deviation for the external Glycerol, external 1,3-PDO and DCW
+	@return: Gaussian log-likelihood
+	"""
+	#CALIBRATION CONSTANT
+	if dhaB_dhaT_model.transform_name == 'log_unif':
+		bound_a,bound_b = LOG_UNIF_PRIOR_PARAMETERS['scalar']
+		scalar = 10**((bound_b - bound_a)*params[0] + bound_a) 
+	elif dhaB_dhaT_model.transform_name == 'log_norm':
+		scalar = 10**(params[0])
+	elif dhaB_dhaT_model.transform_name == " ":
+		scalar= params[0]
+	else:
+		raise ValueError('Unknown transform')
+
+	# PARAMETERS FOR MODEL
+	params_to_dict = {}
+	params_to_dict['scalar'] = scalar
+	for param,key in zip(params[1:],MODEL_PARAMETER_LIST):
+		params_to_dict[key] = param
+
+	diff_f_data = []
+
+	for gly_cond in TIME_SAMPLES.keys():
+		data_sample_df = DATA_SAMPLES[gly_cond] # experimental data
+
+		init_conds = {'G_CYTO_INIT': 0,
+					  'H_CYTO_INIT': 0,
+					  'P_CYTO_INIT': 0,
+					  'G_EXT_INIT': data_sample_df[0,0],
+					  'H_EXT_INIT': 0,
+					  'P_EXT_INIT': data_sample_df[0,1],
+					  'CELL_CONC_INIT': DCW_TO_COUNT_CONC*scalar*data_sample_df[0,2]
+					  } # set initial conditions
+
+		tsamp = TIME_SAMPLES[gly_cond]
+		fvals = dhaB_dhaT_model.QoI(params_to_dict,init_conds,tsamp)
+		# compute difference for loglikelihood
+		fvals[:,2] = fvals[:,2]/(scalar*DCW_TO_COUNT_CONC)
+		sigma = np.array(sigma)
+		data_diff_matrix = (fvals-data_sample_df)/sigma[np.newaxis,:]
+		diff_f_data.extend(data_diff_matrix.ravel())
+	return -0.5*np.dot(diff_f_data,diff_f_data) 
+
+
+
+
Index: WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/__init__.py b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/__init__.py
new file mode 100644
--- /dev/null	(date 1622045462766)
+++ b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/__init__.py	(date 1622045462766)
@@ -0,0 +1,4 @@
+from .MCMC import *
+from .dhaB_dhaT_model_prior import DhaBDhaTModelMCMC
+from .dhaB_dhaT_model_bayesian_funs import rprior,logprior,loglik
+from .prior_constants import LOG_UNIF_PRIOR_PARAMETERS, LOG_NORM_PRIOR_PARAMETERS, UNIF_PRIOR_PARAMETERS
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/MCMC.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/MCMC.py b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/MCMC.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/MCMC.py
rename to WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/MCMC.py
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/MCMC.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC/MCMC.py	(date 1622045462810)
@@ -1,6 +1,6 @@
 import numpy as np
 from scipy.optimize import minimize
-from numpy.random import standard_normal,uniform,lognormal,exponential,gamma
+from numpy.random import standard_normal,uniform
 from scipy.linalg import sqrtm
 
 def postdraws(logpost, rprior, initial_param, lbda = None,nsamp=2000):
@@ -89,8 +89,6 @@
 	: beta          : weight of fixed metropolis walk (1-beta is the weight of the empirical adaptive walk)
 	: lbda          : perturbation magnitude
 	"""
-
-	optimizelp = lambda tcurr: -logpost(tcurr)
 	tcurr = initial_param()
 	d = len(tcurr)
 
@@ -170,7 +168,6 @@
 	optimizelp = lambda tcurr: -logpost(tcurr)
 	lb = np.quantile(rprior(10**6),0.001,axis=0)
 	ub = np.quantile(rprior(10**6),0.999,axis=0)
-
 	tmax = rprior(1).reshape(-1)
 	tmaxval = optimizelp(tmax)
 
Index: WholeCell/13_PDO_Pathway_Inference/ActiveLearning/setup.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/setup.py b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/setup.py
new file mode 100644
--- /dev/null	(date 1622045462766)
+++ b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/setup.py	(date 1622045462766)
@@ -0,0 +1,9 @@
+from setuptools import setup, find_packages
+
+setup(
+    name='Active Learning class',
+    version='0.1.0',
+    author='Andre Archer',
+    author_email='andrearcher2017@u.northwestern.edu',
+    packages= ['ActiveLearning']
+)
Index: .idea/MCP.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/MCP.iml b/.idea/MCP.iml
new file mode 100644
--- /dev/null	(date 1622045462762)
+++ b/.idea/MCP.iml	(date 1622045462762)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="EPYTEXT" />
+    <option name="myDocStringFormat" value="Epytext" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1622045462762)
+++ b/.idea/.gitignore	(date 1622045462762)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
+# Editor-based HTTP Client requests
+/httpRequests/
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/active_learning_train_GP.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/active_learning_train_GP.py b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/active_learning_train_GP.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/active_learning_train_GP.py
rename to WholeCell/13_PDO_Pathway_Inference/ActiveLearning/active_learning_train_GP.py
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/active_learning_train_GP.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/active_learning_train_GP.py	(date 1622045462810)
@@ -1,22 +1,40 @@
 import time
 from skopt.space import Space
 from skopt.sampler import Lhs
-from build_separable_GP import *
 from mpi4py import MPI
-from data_gen_funs import *
-from active_learning_generate_training_set import unif_param_2_log_norm
+from ActiveLearning import DhaBDhaTModelActiveLearning
+from ActiveLearning.build_separable_GP import *
+from base_dhaB_dhaT_model.data_set_constants import NPARAMS, INIT_CONDS_GLY_PDO_DCW
+from base_dhaB_dhaT_model.model_constants import QoI_PARAMETER_LIST
+from base_dhaB_dhaT_model.misc_functions import load_obj,save_obj
 import sys
+from os.path import dirname, abspath
+ROOT_PATH = dirname(abspath(__file__))
 
 comm = MPI.COMM_WORLD
 size = comm.Get_size()
 rank = comm.Get_rank()
 
-def active_learning_train_GP(explan_train,respon_train,explan_test,respon_test,max_training_length,ninitial = 100,tol=1e-7):
+def active_learning_train_GP(explan_train,respon_train,explan_test,respon_test,
+                             max_training_length,ninitial = 100,tol=1e-7):
+    """
+    Identifies points that minimizes the entropy of the GP and addes the points to the
+    training set
+
+    :param explan_train: Initial explanatory training set of the GP
+    :param respon_train: Initial response training set of the GP
+    :param explan_test: explanatory test set of the GP
+    :param respon_test: response test set of the GP
+    :param max_training_length: maximum size of the trianing set
+    :param ninitial: Number of initial points to seed the optimization to find the minimizing entropy point
+    :param tol: integration tolerance
+    :return: dictionary of training set, response set, final GP, rmse test error over the active learning process
+    """
 
     ######################################################################################################
     ######################################### DO INITIAL FIT #############################################
     ######################################################################################################
-    dhaB_dhaT_model = DhaBDhaTModel(transform="log_unif")
+    dhaB_dhaT_model = DhaBDhaTModelActiveLearning(transform="log_unif")
     if rank == 0:
         fitted_info = fitGP(explan_train, respon_train, init_logeta=0*np.ones(NPARAMS+2),
                             lowerb=-np.ones(NPARAMS+2), upperb=np.ones(NPARAMS+2))
@@ -94,15 +112,9 @@
             explan_train_prop = np.concatenate((explan_train,unif_param_prop_full))
 
 
-            # transform unif parameter to generate response data
-            if ds == "log_norm":
-                param_prop = unif_param_2_log_norm(unif_param_prop)
-            else:
-                param_prop = unif_param_prop
-
             # generate data
             try:
-                y_prop = generate_data(param_prop,dhaB_dhaT_model,tol = tol)
+                y_prop = dhaB_dhaT_model.QoI_all_exp(unif_param_prop,tol = tol)
             except TypeError:
                 continue
 
@@ -142,34 +154,43 @@
     if rank == 0:
         dict_data = {'explan_training_set': explan_train,
                      'respon_train': respon_train,
-                     'fitted_info': fitted_info,
+                     'c': fitted_info,
                      'rmse_array': rmse_array}
         return dict_data
 
 def main(argv, arc):
+    """
+    Trains GP with pickle file containing training and test set
+    :param argv[1]: file pickle addressm
+    :param argv[2]: maximum training length
+    :param argv[3]: seed size of optimization search
+    :param arc: number of arguments
+    :return:
+    """
     #load file name
-    ds = argv[1]
-    data_file_name = argv[2]
-    max_training_length = int(float(argv[3]))
+    data_file_name = argv[1]
+    max_training_length = int(float(argv[2]))
 
-    if len(argv) > 4:
-        ninitial = int(argv[4])
+    if arc > 4:
+        ninitial = int(argv[3])
     else:
         ninitial = 100
 
-    explan_train,explan_test,respon_train,respon_test = load_obj("active_learning_data/" + data_file_name)
+    explan_train,explan_test,respon_train,respon_test = load_obj(ROOT_PATH+"/output/active_learning_data/"
+                                                                 + data_file_name)
 
     # train GP
     time1 = time.time()
-    learnt_GP = active_learning_train_GP(ds,explan_train,respon_train,explan_test,respon_test,max_training_length,ninitial)
+    learnt_GP = active_learning_train_GP(explan_train,respon_train,explan_test,respon_test,
+                                         max_training_length,ninitial)
     time2 = time.time()
     if rank == 0:
         print(time2-time1)
         date_string = time.strftime("%Y_%m_%d_%H:%M")
         file_name= 'separableGPtraining' + '_nsamples_'+ str(max_training_length) + '_date_'+date_string
         plt.scatter(range(len(learnt_GP['rmse_array'])),learnt_GP['rmse_array'])
-        plt.savefig('active_learning_results/rsme_' + file_name + '.jpg',bbox_inches='tight')
-        save_obj(learnt_GP,'active_learning_results/'+ file_name)
+        plt.savefig(ROOT_PATH+'/output/active_learning_results/rsme_' + file_name + '.jpg',bbox_inches='tight')
+        save_obj(learnt_GP,ROOT_PATH+'/output/active_learning_results/'+ file_name)
 
 if __name__ == '__main__':
     main(sys.argv, len(sys.argv))
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/active_learning_generate_training_set.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/active_learning_generate_training_set.py b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/active_learning_generate_training_set.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/active_learning_generate_training_set.py
rename to WholeCell/13_PDO_Pathway_Inference/ActiveLearning/active_learning_generate_training_set.py
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/active_learning_generate_training_set.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/active_learning_generate_training_set.py	(date 1622045462810)
@@ -3,17 +3,23 @@
 from skopt.sampler import Lhs
 from sklearn.model_selection import train_test_split
 from mpi4py import MPI
-from data_gen_funs import *
+from ActiveLearning import DhaBDhaTModelActiveLearning
+import numpy as np
+from base_dhaB_dhaT_model.data_set_constants import INIT_CONDS_GLY_PDO_DCW
+from base_dhaB_dhaT_model.model_constants import QoI_PARAMETER_LIST
+from base_dhaB_dhaT_model.misc_functions import save_obj
 import sys
+from os.path import dirname, abspath
+ROOT_PATH = dirname(abspath(__file__))
 
 comm = MPI.COMM_WORLD
 size = comm.Get_size()
 rank = comm.Get_rank()
 
-def generate_training_data(ds, n_samples, tol=1e-7):
+def generate_training_data(transform, n_samples, tol=1e-7):
     """
     Generate the generate training and test set using latin hypercube for active learning
-	@param ds: parameter distribution -- log uniform and log normal
+	@param transform: parameter distribution -- log uniform and log normal
 	@param n_samples: number of parameter samples for generate training set
 	@param tol: integration tolerance
 
@@ -22,7 +28,7 @@
 	@return ftrain: QoI evaluations of Glycerol, 1,3-PDO, DCW for samples in input_train
 	@return ftest: QoI evaluations of Glycerol, 1,3-PDO, DCW for samples in input_test
 	"""
-    dhaB_dhaT_model = DhaBDhaTModel(transform=ds)
+    dhaB_dhaT_model = DhaBDhaTModelActiveLearning(transform=transform)
 
     if rank == 0:
         # generate initial parameters and evaluation data
@@ -62,15 +68,8 @@
                                                             zip([input_train_rank, input_test_rank],
                                                                 [ftrain_rank, ftest_rank])):
         for unif_param in explan_set_prop:
-            # transform unif params
-            if ds == "log_norm":
-                param = unif_param_2_log_norm(unif_param)
-            else:
-                param = unif_param
-
-            # generate data
             try:
-                response_data.append(generate_data(param, dhaB_dhaT_model, tol=tol))
+                response_data.append(dhaB_dhaT_model.QoI_all_exp(unif_param, tol=tol))
                 explan_set.append(unif_param)
             except TypeError:
                 continue
@@ -101,7 +100,6 @@
         input_test = np.array(input_test)
         return input_train, input_test, ftrain, ftest
 
-
 def main(argv, arc):
     # generate data
     ds = argv[1]
@@ -109,14 +107,10 @@
     tol = float(argv[3])
     data = generate_training_data(ds, n_samples, tol=1e-7)
     if rank == 0:
-        print(data[0].shape)
-        print(data[2].shape)
-        print(data[1].shape)
-        print(data[3].shape)
         # generate folder name
-        folder_name = "active_learning_data"
+        folder_name =ROOT_PATH + "/output/active_learning_data"
         date_string = time.strftime("%Y_%m_%d_%H:%M")
-        file_name = "transform_" + ds + "_nsamples_" + str(n_samples) + "_tol_" + "{:1e}".format(
+        file_name = "transform_" + ds + "_nsamples_" + str(n_samples) + "_tol_" + "{:.0e}".format(
             tol) + "_date_" + date_string
 
         # save object
@@ -125,3 +119,5 @@
 
 if __name__ == '__main__':
     main(sys.argv, len(sys.argv))
+
+
Index: WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/top_level.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/top_level.txt b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/top_level.txt
new file mode 100644
--- /dev/null	(date 1622045462762)
+++ b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/top_level.txt	(date 1622045462762)
@@ -0,0 +1,1 @@
+ActiveLearning
Index: WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/dependency_links.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/dependency_links.txt b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/dependency_links.txt
new file mode 100644
--- /dev/null	(date 1622045462762)
+++ b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/dependency_links.txt	(date 1622045462762)
@@ -0,0 +1,1 @@
+
Index: WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/SOURCES.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/SOURCES.txt b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/SOURCES.txt
new file mode 100644
--- /dev/null	(date 1622045462762)
+++ b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/SOURCES.txt	(date 1622045462762)
@@ -0,0 +1,9 @@
+setup.py
+ActiveLearning/__init__.py
+ActiveLearning/build_separable_GP.py
+ActiveLearning/constants.py
+ActiveLearning/dhaB_dhaT_model_bounds.py
+Active_Learning_class.egg-info/PKG-INFO
+Active_Learning_class.egg-info/SOURCES.txt
+Active_Learning_class.egg-info/dependency_links.txt
+Active_Learning_class.egg-info/top_level.txt
\ No newline at end of file
Index: WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/PKG-INFO
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/PKG-INFO b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/PKG-INFO
new file mode 100644
--- /dev/null	(date 1622045462762)
+++ b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/Active_Learning_class.egg-info/PKG-INFO	(date 1622045462762)
@@ -0,0 +1,10 @@
+Metadata-Version: 1.0
+Name: Active-Learning-class
+Version: 0.1.0
+Summary: UNKNOWN
+Home-page: UNKNOWN
+Author: Andre Archer
+Author-email: andrearcher2017@u.northwestern.edu
+License: UNKNOWN
+Description: UNKNOWN
+Platform: UNKNOWN
Index: WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/dhaB_dhaT_model_bounds.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/dhaB_dhaT_model_bounds.py b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/dhaB_dhaT_model_bounds.py
new file mode 100644
--- /dev/null	(date 1622045462762)
+++ b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/dhaB_dhaT_model_bounds.py	(date 1622045462762)
@@ -0,0 +1,126 @@
+'''
+The DhaB-DhaT model contains DhaB-DhaT reaction pathway
+in the MCP; diffusion in the cell; diffusion from the cell 
+in the external volume.
+
+This model is currently in use. The DhaB-DhaT model assumes that there 
+are M identical MCPs within the cytosol and N identical cells within the 
+external volume. From time scsle analysis, gradients in cell are removed.
+
+Programme written by aarcher07
+Editing History:
+- 28/10/20
+'''
+
+from base_dhaB_dhaT_model.dhaB_dhaT_model import DhaBDhaTModel
+from base_dhaB_dhaT_model.misc_functions import transform_from_log_unif
+from base_dhaB_dhaT_model.data_set_constants import TIME_EVALS,INIT_CONDS_GLY_PDO_DCW
+from base_dhaB_dhaT_model.model_constants import QoI_PARAMETER_LIST,DCW_TO_COUNT_CONC
+from .constants import LOG_PARAMETERS_BOUNDS
+
+
+
+class DhaBDhaTModelActiveLearning(DhaBDhaTModel):
+    def __init__(self, rc = 0.375e-6, lc = 2.47e-6,
+                 external_volume = 0.002, transform = ''):
+        """
+        Initializes parameters to be used numerial scheme
+        :param rc: Radius of cell in metres
+        :param lc: length of the cell in metres (needed if assuming cells are rods)
+        :param external_volume: external volume containing cells in metres^3
+        :param transform: transform of the parameters, log10, log10 and standardized, no transform
+        """
+        # Integration Parameters
+        super().__init__(rc, lc,external_volume)
+        self.transform_name = transform
+        if transform == 'log_unif':
+            self._sderiv = self._sderiv_log_unif
+        elif transform == '':
+            pass
+        else:
+            raise ValueError('Unknown transform')
+        self._set_symbolic_sderiv_conc_fun()
+
+    def _sderiv_log_unif(self,t,x,log_params):
+        """
+        Computes the spatial derivative of the system at time point, t, with the parameters
+        [-1,1] transformed by transforming parameters into their original values in LOG_PARAMETER_BOUNDS
+        :param t: time
+        :param x: state variables
+        :param params_sens: [0,1] transformed parameter list
+        """
+        if log_params is None:
+            print("Please set the parameter values")
+        params = transform_from_log_unif(log_params,LOG_PARAMETERS_BOUNDS)
+        return super()._sderiv(t,x,params)
+
+
+    def QoI(self,params,init_conds,tsamples=TIME_EVALS,tol = 10**-5):
+        """
+        Integrates the DhaB-DhaT model with parameter values, param, and returns external glycerol
+         1,3-PDO and cell concentration time samples, tsamples
+        @param params: dictionary parameter values to run the model. keys of the dictionary are in model_constants.py
+        @param init_conds: dictionary initial conditions to run the model. keys of the dictionary are in model_constants
+        @param base_dhaB_dhaT_model: instance of the DhaBDhaTModel class
+        @param tsamples: time samples to collect external glycerol, external 1,3-PDO and DCW
+        @param tol: tolerance at which integrate the DhaBDhaTModel
+        @return: glycerol, external 1,3-PDO and DCW sampled at time samples, tsamples (3 x |tsamples| matrix)
+        """
+
+        dict_scalar_transformed = dict()
+        dict_scalar_transformed["scalar"] = params["scalar"]
+        if self.transform_name == "log_unif":
+            dict_scalar_transformed = transform_from_log_unif(dict_scalar_transformed,LOG_PARAMETERS_BOUNDS)
+        elif self.transform_name == " ":
+            pass
+        else:
+            raise ValueError('Unknown transform')
+
+        for key, val in params.items():
+            if key != "scalar":
+                dict_scalar_transformed[key] = val
+
+        return super().QoI(dict_scalar_transformed,init_conds,tsamples=tsamples,tol = tol)
+
+    def QoI_all_exp(self, params,tsamples=TIME_EVALS,tol = 10**-5):
+        """
+        Integrates the DhaB-DhaT model with parameter values, param, and returns external glycerol
+         1,3-PDO and cell concentration at time samples, tsamples for all experimental initial conditions, INIT_CONDS_GLY_PDO_DCW
+        @param params: dictionary parameter values to run the model. keys of the dictionary are in model_constants.py
+        @param dhaB_dhaT_model: instance of the DhaBDhaTModelActiveLearning class
+        @param tsamples: time samples to collect external glycerol, external 1,3-PDO and DCW
+        @param tol: tolerance at which integrate the DhaBDhaTModel
+        @return: glycerol, external 1,3-PDO and DCW sampled at time samples, tsamples, for all experimental conditions (3*|tsamples|*4 length vector)
+        """
+
+        #CALIBRATION CONSTANT
+        dict_scalar_transformed = dict()
+        dict_scalar_transformed["scalar"] = params[0]
+        if self.transform_name == "log_unif":
+            dict_scalar_transformed = transform_from_log_unif(dict_scalar_transformed,LOG_PARAMETERS_BOUNDS)
+        elif self.transform_name == " ":
+            pass
+        else:
+            raise ValueError('Unknown transform')
+        # PARAMETERS FOR MODEL
+        params_to_dict = {}
+        for param,key in zip(params,QoI_PARAMETER_LIST):
+            params_to_dict[key] = param
+
+        f_data = []
+
+        for conds in INIT_CONDS_GLY_PDO_DCW.values():
+            init_conds = {'G_CYTO_INIT': 0,
+                          'H_CYTO_INIT': 0,
+                          'P_CYTO_INIT': 0,
+                          'G_EXT_INIT': conds[0],
+                          'H_EXT_INIT': 0,
+                          'P_EXT_INIT': conds[1],
+                          'CELL_CONC_INIT': DCW_TO_COUNT_CONC*dict_scalar_transformed["scalar"]*conds[2]
+                        }
+            fvals = self.QoI(params_to_dict,init_conds,tsamples,tol)
+            # compute difference for loglikelihood
+            f_data.append(fvals.flatten('F'))
+
+        return f_data
+
Index: WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/constants.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/constants.py b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/constants.py
new file mode 100644
--- /dev/null	(date 1622045462762)
+++ b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/constants.py	(date 1622045462762)
@@ -0,0 +1,26 @@
+"""
+Constants parameters 
+
+Programme written by aarcher07
+Editing History:
+- 1/3/21
+"""
+
+import numpy as np
+import pandas as pd
+import scipy.stats as stats
+
+
+# LOG NORM PARAMETERS 95\% BOUNDS
+
+LOG_PARAMETERS_BOUNDS = {'scalar': [-1., 1.],
+                          'cellperGlyMass': np.log10([1e4, 1e12]),
+                          'PermCellGlycerol': np.log10([1e-8, 1e-2]),
+                          'PermCellPDO': np.log10([1e-6, 1e-2]),
+                          'PermCell3HPA': np.log10([1e-4, 1e-2]),
+                          'VmaxfDhaB': np.log10([1e-3, 1e6]),
+                          'KmDhaBG': np.log10([1e-4 , 1e2]),
+                          'VmaxfDhaT': np.log10([1e-3,1e6]),
+                          'KmDhaTH': np.log10([1e-4 , 1e2]),
+                          'VmaxfGlpK': np.log10([1e-3,1e6]),
+                          'KmGlpKG': np.log10([1e-4,1e2])}
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/build_separable_GP.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/build_separable_GP.py b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/build_separable_GP.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/build_separable_GP.py
rename to WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/build_separable_GP.py
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/build_separable_GP.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/build_separable_GP.py	(date 1622045462810)
@@ -1,21 +1,15 @@
 import numpy as np
-import math
-import matplotlib.pyplot as plt 
-from constants import *
-import pickle
-from dhaB_dhaT_model import DhaBDhaTModel
-import pandas as pd
-from scipy.integrate import solve_ivp
+from base_dhaB_dhaT_model.data_set_constants import TIME_EVALS, NPARAMS
 from scipy.optimize import minimize
 
 
 def corr(pv1,pv2, eta1):
 	"""
-
-	@param pv1:
-	@param pv2:
-	@param eta1:
-	@return:
+	Parameter correlation matrix (Gaussian kernel)
+	@param pv1: 1st parameter argument n_1 x d matrix. n_1 parameter samples that live in R^d
+	@param pv2: 2nd parameter argument n_2 x d matrix. n_2 parameter samples that live in R^d
+	@param eta1: parameterization of the correlation matrix (lives in R^d)
+	@return: d x d matrix
 	"""
 	K = np.ones((pv1.shape[0],pv2.shape[0]))
 	for dlcv in range(pv1.shape[1]):
@@ -24,9 +18,9 @@
 
 def timeSigma(eta2):
 	"""
-
-	@param eta2:
-	@return:
+	Time correlation matrix (Gaussian kernel)
+	@param eta2: parameterization of the correlation matrix (lives in R)
+	@return: |TIME_EVALS| x |TIME_EVALS| matrix
 	"""
 	sigma_f = np.exp(-eta2*np.abs(np.subtract.outer(TIME_EVALS, TIME_EVALS)))
 	return sigma_f
@@ -34,9 +28,9 @@
 
 def varSigma(eta3):
 	"""
-
-	@param eta3:
-	@return:
+	QoI correlation matrix (Gaussian kernel)
+	@param eta3: parameterization of the correlation matrix (lives in R)
+	@return: 3 x 3 matrix
 	"""
 	indices = [1,2,3]
 	sigma_f = np.exp(-eta3*np.abs(np.subtract.outer(indices, indices)))
@@ -44,11 +38,11 @@
 
 def MLE(logeta, to, fo):
 	"""
-
-	@param logeta:
-	@param to:
-	@param fo:
-	@return:
+	Generates the MLE hyperparameters of the GP
+	@param logeta: length d + 2 vector
+	@param to: parameter training set (R^{n_1 \times d})
+	@param fo: QoI training set (R^{d*n_1*|TIME_EVALS| })
+	@return: gammahat, sigmahat hyperparameters
 	"""
 	logeta1 = logeta[:NPARAMS]
 	logeta2 = logeta[NPARAMS]
@@ -70,11 +64,11 @@
 
 def negloglik(logeta, t0, f0):
 	"""
-
-	@param logeta:
-	@param t0:
-	@param f0:
-	@return:
+	Computes the likelihood function of the GP
+	@param logeta: length d + 2 vector
+	@param to: parameter training set (R^{n_1 \times d})
+	@param fo: QoI training set (R^{d*n_1*|TIME_EVALS| })
+	@return: gammahat, sigmahat hyperparameters
 	"""
 	n = len(f0)# obtain sigmahat for a given eta
 	logeta1 = logeta[:NPARAMS]
@@ -96,14 +90,15 @@
 		  lowerb=-np.ones(NPARAMS+2), upperb=np.ones(NPARAMS+2),
 		  maxiter = int(10**3)):
 	"""
-
-	@param t_tr:
-	@param f_tr:
-	@param init_logeta:
-	@param lowerb:
-	@param upperb:
-	@param maxiter:
-	@return:
+	Runs the optimization of the GP to optimal parameters, eta1,eta2 and eta3 given the response training and response
+	set
+	@param t_tr: parameter training set (R^{n_1 \times d})
+	@param f_tr: QoI training set (R^{d*n_1*|TIME_EVALS|})
+	@param init_logeta: initial logeta parameters. length d + 2 vector
+	@param lowerb: logeta lower bound for the optimization
+	@param upperb: logeta upper bound for the optimization
+	@param maxiter: maximum number for the optimization
+	@return: dictionary with GP parameters, etahat, and hyperparameters, 'sigmahat', 'gammahat'
 	"""
 	negloglik_log_eta = lambda log_eta: negloglik(log_eta,t_tr, f_tr)
 	log_eta_hat = minimize(negloglik_log_eta, init_logeta, method="L-BFGS-B",
@@ -116,11 +111,11 @@
 def predictGP(fitted_info, t_test, t_tr, f_tr):# obtain the fitted info
 	"""
 
-	@param fitted_info:
-	@param t_test:
-	@param t_tr:
-	@param f_tr:
-	@return:
+	@param fitted_info: dictionary with GP parameters, etahat, and hyperparameters, 'sigmahat', 'gammahat'
+	@param t_test: parameter test set (R^{n_3 \times d})
+	@param t_tr: parameter training set (R^{n_1 \times d})
+	@param f_tr: QoI training set (R^{d*n_1*|TIME_EVALS|})
+	@return: dictionary of predicted mean and variance for t_test
 	"""
 
 	etahat = fitted_info['etahat']
Index: WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/__init__.py b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/__init__.py
new file mode 100644
--- /dev/null	(date 1622045462762)
+++ b/WholeCell/13_PDO_Pathway_Inference/ActiveLearning/ActiveLearning/__init__.py	(date 1622045462762)
@@ -0,0 +1,3 @@
+from .constants import LOG_PARAMETERS_BOUNDS
+from .build_separable_GP import corr, timeSigma, varSigma, MLE, negloglik, fitGP, predictGP
+from .dhaB_dhaT_model_bounds import DhaBDhaTModelActiveLearning
Index: WholeCell/13_PDO_Pathway_Inference/.idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/.idea/workspace.xml b/WholeCell/13_PDO_Pathway_Inference/.idea/workspace.xml
new file mode 100644
--- /dev/null	(date 1622045462762)
+++ b/WholeCell/13_PDO_Pathway_Inference/.idea/workspace.xml	(date 1622045462762)
@@ -0,0 +1,120 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AnalysisUIOptions">
+    <option name="SCOPE_TYPE" value="3" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="5ae65f53-ace1-4a48-9581-5bcf1d331803" name="Default Changelist" comment="completed packaging. to put on quest for Active Learning.">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ActiveLearning/active_learning_train_GP.py" beforeDir="false" afterPath="$PROJECT_DIR$/ActiveLearning/active_learning_train_GP.py" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Python Script" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/../../.." />
+  </component>
+  <component name="ProjectId" id="1sPLDqqUlENjpgpmW1QVh8fiJbS" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent">
+    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
+    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$/ActiveLearning" />
+    <property name="run.code.analysis.last.selected.profile" value="aDefault" />
+    <property name="settings.editor.selected.configurable" value="com.jetbrains.python.configuration.PyIntegratedToolsModulesConfigurable" />
+  </component>
+  <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="$PROJECT_DIR$/ActiveLearning" />
+      <recent name="$PROJECT_DIR$/MCMC" />
+      <recent name="$PROJECT_DIR$/base_dhaB_dhaT_model" />
+      <recent name="$PROJECT_DIR$/dhaB_dhaT_model" />
+    </key>
+    <key name="MoveFile.RECENT_KEYS">
+      <recent name="$PROJECT_DIR$/ActiveLearning" />
+      <recent name="$PROJECT_DIR$/ActiveLearning/output" />
+      <recent name="$PROJECT_DIR$/ActiveLearning/ActiveLearning" />
+      <recent name="$PROJECT_DIR$/MCMC/output" />
+      <recent name="$PROJECT_DIR$/MCMC/MCMC" />
+    </key>
+  </component>
+  <component name="RunManager">
+    <configuration name="prior_constants" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="MCMC_fixed_parameters" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/MCMC/MCMC" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/MCMC/MCMC/prior_constants.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Python.prior_constants" />
+      </list>
+    </recent_temporary>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="5ae65f53-ace1-4a48-9581-5bcf1d331803" name="Default Changelist" comment="" />
+      <created>1620769161731</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1620769161731</updated>
+    </task>
+    <servers />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+    <option name="oldMeFiltersMigrated" value="true" />
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="completed packaging. to put on quest for Active Learning." />
+    <option name="LAST_COMMIT_MESSAGE" value="completed packaging. to put on quest for Active Learning." />
+  </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/MCMC/MCMC/MCMC.py</url>
+          <line>123</line>
+          <option name="timeStamp" value="3" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
+  </component>
+</project>
\ No newline at end of file
Index: WholeCell/13_PDO_Pathway_Inference/.idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/.idea/inspectionProfiles/profiles_settings.xml b/WholeCell/13_PDO_Pathway_Inference/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1622045462762)
+++ b/WholeCell/13_PDO_Pathway_Inference/.idea/inspectionProfiles/profiles_settings.xml	(date 1622045462762)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>WholeCell/DhaB_DhaT_Model/object_oriented/data/\nWholeCell/DhaB_DhaT_Model/object_oriented/plot/\nWholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/emulator_MCMC_results_data/\nWholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/emulator_MCMC_results_plots/\nWholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/emulator_data/\nWholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/MCMC_results_data/\nWholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/MCMC_results_plots/\nWholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/MCMC_results_data_quest/\nWholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/MCMC_results_plots_quest/\nWholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/active_learning_data/\nWholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/active_learning_results/\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ b/.gitignore	(date 1622045462762)
@@ -1,11 +1,11 @@
 WholeCell/DhaB_DhaT_Model/object_oriented/data/
 WholeCell/DhaB_DhaT_Model/object_oriented/plot/
-WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/emulator_MCMC_results_data/
-WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/emulator_MCMC_results_plots/
-WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/emulator_data/
-WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/MCMC_results_data/
-WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/MCMC_results_plots/
-WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/MCMC_results_data_quest/
-WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/MCMC_results_plots_quest/
-WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/active_learning_data/
-WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/active_learning_results/
+WholeCell/13_PDO_Pathway_Inference/trash/emulator_MCMC_results_data/
+WholeCell/13_PDO_Pathway_Inference/trash/emulator_MCMC_results_plots/
+WholeCell/13_PDO_Pathway_Inference/trash/emulator_data/
+WholeCell/13_PDO_Pathway_Inference/MCMC/output/MCMC_results_data/
+WholeCell/13_PDO_Pathway_Inference/MCMC/output/MCMC_results_plots/
+WholeCell/13_PDO_Pathway_Inference/MCMC/output/MCMC_results_data_quest/
+WholeCell/13_PDO_Pathway_Inference/MCMC/output/MCMC_results_plots_quest/
+#WholeCell/13_PDO_Pathway_Inference/ActiveLearning/output/active_learning_data/
+WholeCell/13_PDO_Pathway_Inference/ActiveLearning/output/active_learning_results/
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/test/tests_dhaB_dhaT_model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/test/tests_dhaB_dhaT_model.py b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/test/test_dhaB_dhaT_model.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/test/tests_dhaB_dhaT_model.py
rename to WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/test/test_dhaB_dhaT_model.py
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/test/tests_dhaB_dhaT_model.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/test/test_dhaB_dhaT_model.py	(date 1622045462810)
@@ -1,8 +1,9 @@
 import numpy as np
 from scipy.integrate import solve_ivp
+import matplotlib as mpl
+mpl.rcParams['text.usetex'] = True
+mpl.rcParams['text.latex.preamble'] = r'\usepackage{amsmath}'
 import matplotlib.pyplot as plt
-import sys
-sys.path.insert(0, '..')
 from base_dhaB_dhaT_model import *
 
 def test_devs():
@@ -91,7 +92,7 @@
     plt.plot(timeorighours,sol.y[-1,:].T/((10**-0.3531)*DCW_TO_COUNT_CONC), colour[i])
     plt.title('Plot of cell concentration')
     plt.xlabel('time (hr)')
-    plt.ylabel('concentration (cell per m^3)')
+    plt.ylabel('concentration (cell per $m^3$)')
     plt.show()
 
     #check mass balance
@@ -147,7 +148,7 @@
     plt.plot(TIME_EVALS,qoi_vals[:,2])
     plt.title('Plot of dry cell weight')
     plt.xlabel('time (hr)')
-    plt.ylabel('concentration (g per m^3)')
+    plt.ylabel('concentration (g per $m^3$)')
     plt.show()
 
 if __name__ == '__main__':
Index: WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/base_dhaB_dhaT_model/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/base_dhaB_dhaT_model/__init__.py b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/base_dhaB_dhaT_model/__init__.py
new file mode 100644
--- /dev/null	(date 1622045462770)
+++ b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/base_dhaB_dhaT_model/__init__.py	(date 1622045462770)
@@ -0,0 +1,7 @@
+from .data_set_constants import INIT_CONDS_GLY_PDO_DCW, TIME_EVALS, DATA_COLUMNS, EXTERNAL_VOLUME, NPARAMS, TIME_SAMPLES,\
+    DATA_SAMPLES
+from .dhaB_dhaT_model import DhaBDhaTModel
+from .misc_functions import transform_from_log_unif, transform_to_log_unif, transform_from_log_norm, \
+    transform_to_log_norm, load_obj, save_obj
+from .model_constants import HRS_TO_SECS, DCW_TO_COUNT_CONC, MODEL_PARAMETER_LIST, QoI_PARAMETER_LIST,\
+    VARIABLE_INIT_NAMES, VARS_TO_TEX, VARS_TO_UNITS
Index: WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/top_level.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/top_level.txt b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/top_level.txt
new file mode 100644
--- /dev/null	(date 1622045462770)
+++ b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/top_level.txt	(date 1622045462770)
@@ -0,0 +1,1 @@
+base_dhaB_dhaT_model
Index: WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/dependency_links.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/dependency_links.txt b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/dependency_links.txt
new file mode 100644
--- /dev/null	(date 1622045462770)
+++ b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/dependency_links.txt	(date 1622045462770)
@@ -0,0 +1,1 @@
+
Index: WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/SOURCES.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/SOURCES.txt b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/SOURCES.txt
new file mode 100644
--- /dev/null	(date 1622045462770)
+++ b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/SOURCES.txt	(date 1622045462770)
@@ -0,0 +1,11 @@
+setup.py
+DhaB_DhaT_Model_class.egg-info/PKG-INFO
+DhaB_DhaT_Model_class.egg-info/SOURCES.txt
+DhaB_DhaT_Model_class.egg-info/dependency_links.txt
+DhaB_DhaT_Model_class.egg-info/top_level.txt
+base_dhaB_dhaT_model/__init__.py
+base_dhaB_dhaT_model/data_set_constants.py
+base_dhaB_dhaT_model/dhaB_dhaT_model.py
+base_dhaB_dhaT_model/misc_functions.py
+base_dhaB_dhaT_model/model_constants.py
+test/test_dhaB_dhaT_model.py
\ No newline at end of file
Index: WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/PKG-INFO
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/PKG-INFO b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/PKG-INFO
new file mode 100644
--- /dev/null	(date 1622045462770)
+++ b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/DhaB_DhaT_Model_class.egg-info/PKG-INFO	(date 1622045462770)
@@ -0,0 +1,10 @@
+Metadata-Version: 1.0
+Name: DhaB-DhaT-Model-class
+Version: 0.1.0
+Summary: UNKNOWN
+Home-page: UNKNOWN
+Author: Andre Archer
+Author-email: andrearcher2017@u.northwestern.edu
+License: UNKNOWN
+Description: UNKNOWN
+Platform: UNKNOWN
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/test_dhaB_dhaT_model_prior.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/test_dhaB_dhaT_model_prior.py b/WholeCell/13_PDO_Pathway_Inference/MCMC/test/test_dhaB_dhaT_model_prior.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/test_dhaB_dhaT_model_prior.py
rename to WholeCell/13_PDO_Pathway_Inference/MCMC/test/test_dhaB_dhaT_model_prior.py
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/test_dhaB_dhaT_model_prior.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ b/WholeCell/13_PDO_Pathway_Inference/MCMC/test/test_dhaB_dhaT_model_prior.py	(date 1622045462810)
@@ -1,10 +1,13 @@
 from scipy.integrate import solve_ivp
 import matplotlib.pyplot as plt
-from dhaB_dhaT_model_prior import DhaBDhaTModelMCMC
 from base_dhaB_dhaT_model.model_constants import *
 from base_dhaB_dhaT_model.data_set_constants import *
 from base_dhaB_dhaT_model.misc_functions import *
-from prior_constants import *
+from MCMC import DhaBDhaTModelMCMC, LOG_UNIF_PRIOR_PARAMETERS
+import matplotlib as mpl
+mpl.rcParams['text.usetex'] = True
+mpl.rcParams['text.latex.preamble'] = r'\usepackage{amsmath}'
+import matplotlib.pyplot as plt
 
 def testdev():
     external_volume = 0.002
@@ -29,7 +32,7 @@
                 'CELL_CONC_INIT': INIT_CONDS_GLY_PDO_DCW[50][2]*0.5217871564671509*DCW_TO_COUNT_CONC
                 }
 
-    transform = 'log_norm'
+    transform = 'log_unif'
 
 
     if transform == 'log_unif':
@@ -105,7 +108,7 @@
     plt.plot(timeorighours,sol.y[-1,:].T/((10**-0.3531)*DCW_TO_COUNT_CONC), colour[i])
     plt.title('Plot of cell concentration')
     plt.xlabel('time (hr)')
-    plt.ylabel('concentration (cell per m^3)')
+    plt.ylabel('concentration (cell per $m^3$)')
     plt.show()
 
 
@@ -174,7 +177,7 @@
     plt.plot(TIME_EVALS,qoi_vals[:,2])
     plt.title('Plot of dry cell weight')
     plt.xlabel('time (hr)')
-    plt.ylabel('concentration (g per m^3)')
+    plt.ylabel('concentration (g per $m^3$)')
     plt.show()
 
 if __name__ == '__main__':
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/test_MCMC_dhaB_dhaT_model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/test_MCMC_dhaB_dhaT_model.py b/WholeCell/13_PDO_Pathway_Inference/MCMC/test/test_dhaB_dhaT_model_bayesian_funs.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/test_MCMC_dhaB_dhaT_model.py
rename to WholeCell/13_PDO_Pathway_Inference/MCMC/test/test_dhaB_dhaT_model_bayesian_funs.py
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/test_MCMC_dhaB_dhaT_model.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ b/WholeCell/13_PDO_Pathway_Inference/MCMC/test/test_dhaB_dhaT_model_bayesian_funs.py	(date 1622045462810)
@@ -2,22 +2,20 @@
 import matplotlib as mpl
 mpl.rcParams['text.usetex'] = True
 mpl.rcParams['text.latex.preamble'] = r'\usepackage{amsmath}'
-from MCMC import maxpostdensity
-from dhaB_dhaT_model_prior import DhaBDhaTModelMCMC
-from dhaB_dhaT_model_bayesian_funs import loglik, logprior, rprior
+from MCMC import *
 from base_dhaB_dhaT_model.misc_functions import *
+from os.path import dirname, abspath
+ROOT_PATH =dirname(dirname(abspath(__file__)))
 
 def test(sigma = [2,2,0.1],transform = "log_unif"):
     dhaB_dhaT_model = DhaBDhaTModelMCMC(transform=transform)
 
-    file_name = 'MCMC_results_data/old_files/adaptive_lambda_0,01_beta_0,05_norm_nsamples_1000_sigma_[2,2,0,2]_date_2021_04_15_17_00_rank_2'
+    file_name = ROOT_PATH+'/output/MCMC_results_data/old_files/adaptive_lambda_0,01_beta_0,05_norm_nsamples_1000_sigma_[2,2,0,2]_date_2021_04_15_17_00_rank_2'
     params= load_obj(file_name)[-1]
     loglik_sigma = lambda param: loglik(param,dhaB_dhaT_model,sigma=sigma)
     logpost = lambda param: loglik_sigma(param) + logprior(param, dhaB_dhaT_model.transform_name)
 
-    print(loglik_sigma(params))
-    print(logprior(params, dhaB_dhaT_model.transform_name))
-    print(logpost(params))
+    return loglik_sigma(params), logprior(params, dhaB_dhaT_model.transform_name), logpost(params)
 
 def argmaxdensity(argv, arc):
     """
@@ -37,7 +35,7 @@
 
     # set inital starting point
     def initial_param():
-        file_name = 'MCMC_results_data/old_files/adaptive_lambda_0,01_beta_0,05_norm_nsamples_1000_sigma_[2,2,0,2]_date_2021_04_15_00_21_rank_0'
+        file_name = ROOT_PATH+'/output/MCMC_results_data/old_files/adaptive_lambda_0,01_beta_0,05_norm_nsamples_1000_sigma_[2,2,0,2]_date_2021_04_15_00_21_rank_0'
         param_start = load_obj(file_name)[-1]
         param_start = param_start + 0.1 * standard_normal(len(param_start))
         return param_start
@@ -47,5 +45,5 @@
     return param_max
 
 if __name__ == '__main__':
-    test(sigma=[2,2,0.2], transform='log_norm')
+    print(test(sigma=[2,2,0.2], transform='log_norm'))
     print(argmaxdensity([2,2,0.2, 'log_norm'], 4))
Index: WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/test_MCMC.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/test_MCMC.py b/WholeCell/13_PDO_Pathway_Inference/MCMC/test/test_MCMC.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/test_MCMC.py
rename to WholeCell/13_PDO_Pathway_Inference/MCMC/test/test_MCMC.py
--- a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/test_MCMC.py	(revision 6ff967e22e271e1bddc726ef6ab39e2bd216a6f9)
+++ b/WholeCell/13_PDO_Pathway_Inference/MCMC/test/test_MCMC.py	(date 1622046093969)
@@ -1,6 +1,9 @@
 import numpy as np
 from numpy.random import standard_normal,uniform,normal,exponential,gamma
 from scipy.special import lambertw
+import matplotlib as mpl
+mpl.rcParams['text.usetex'] = True
+mpl.rcParams['text.latex.preamble'] = r'\usepackage{amsmath}'
 import matplotlib.pyplot as plt
 from MCMC import postdraws,adaptive_postdraws, maxpostdensity
 import scipy.stats as stats
@@ -26,7 +29,6 @@
     nsamples = 10**4
 
     #fixed MCMC
-    print('hi')
     tdraws = postdraws(loglik,rprior,initial_param, nsamp = nsamples)
     for i in range(m):
         n, bins, patches = plt.hist(x=tdraws[:,i], bins='auto', color='#0504aa',
@@ -36,8 +38,7 @@
         plt.show()
 
     #adaptive MCMC
-    print('hi')
-    tdraws = adaptive_postdraws(loglik, initial_param, beta=0.01, lbda = 0.1, nsamp = nsamples)
+    tdraws = adaptive_postdraws(loglik, initial_param, beta=0.05, lbda = 0.1, nsamp = nsamples)
     for i in range(m):
         n, bins, patches = plt.hist(x=tdraws[:,i], bins='auto', color='#0504aa',
                                 alpha=0.7,density=True, rwidth=0.85)
@@ -53,10 +54,9 @@
 
     # create model
     def hitf(vals):
-
         g = np.exp(vals[:,0])
-        m = vals[:,1]
-        r = vals[:,2]
+        m = np.exp(vals[:,1])
+        r = np.exp(vals[:,2])
         coeff = vals[:,3]
         h = vals[:,4]
         a = (r**2 * np.pi * coeff)/m
@@ -68,30 +68,32 @@
 
     # create prior, likelihood and posterior
     def rprior(n):
-        return np.array([normal(2*np.log(2) - (1/2)*np.log(0.25+2**2),-2*np.log(2) + np.log(0.25+2**2), size=n),
-                         exponential(1,n),
-                         gamma(5,20,n),
+        return np.array([normal(2*np.log(2) - (1/2)*np.log(0.25 + 2**2), -2*np.log(2) + np.log(0.25 + 2**2), size=n),
+                         np.log(exponential(1,n)),
+                         np.log(gamma(5,20,n)),
                          uniform(0.1,2,n)]).T
 
-    logprior=lambda theta: stats.norm.logpdf(theta[0],scale=-2*np.log(2) + np.log(0.25+2**2),loc=2*np.log(2) - (1/2)*np.log(0.25+2**2))+stats.expon.logpdf(theta[1],scale=1) +stats.gamma.logpdf(theta[2],a=5,scale=1/20) +stats.uniform.logpdf(theta[3],loc=0.1,scale=2-0.1)
+    logprior=lambda theta: stats.norm.logpdf(theta[0],loc=2*np.log(2) - (1/2)*np.log(0.25 + 2**2),scale= -2*np.log(2) + np.log(0.25 + 2**2))\
+                           +stats.expon.logpdf(np.exp(theta[1]),scale=1)\
+                           +stats.gamma.logpdf(np.exp(theta[2]),a=5,scale=1/20) \
+                           +stats.uniform.logpdf(theta[3],loc=0.1,scale=2-0.1)
 
     h = np.array([5,10,20,30,80])
     y = np.array([1.174, 1.576, 2.065, 2.715, 4.427])
     f = lambda theta: hitf(np.concatenate((np.repeat(theta.reshape(1,-1),repeats=len(h),axis=0),h.reshape(-1,1)),1))
-
     loglik =lambda theta: -0.5*np.dot(y-f(theta),y-f(theta)) / 0.1**2
     logpost =lambda theta: loglik(theta) + logprior(theta)
 
     # args for MCMC
-    nsamples = 3*10**4
-    tmax = maxpostdensity(rprior,logpost,disp=True)
+    nsamples = 10**5
+    tmax = maxpostdensity(rprior,logpost,disp=False)
     initial_param = lambda: tmax
 
-    # #fixed MCMC
-    # tdraws = postdraws(logpost,rprior, initial_param,lbda=0.1, nsamp = nsamples)
-    # for i in range(tdraws.shape[1]):
-    #     plt.plot(range(int(nsamples)),tdraws[:,i])
-    #     plt.show()
+    #fixed MCMC
+    tdraws = postdraws(logpost,rprior, initial_param,lbda=0.5, nsamp = nsamples)
+    for i in range(tdraws.shape[1]):
+        plt.plot(range(int(nsamples)),tdraws[:,i])
+        plt.show()
 
     #adaptive MCMC
     tdraws = adaptive_postdraws(logpost,initial_param, beta=0.9, lbda = 0.1, nsamp = nsamples)
@@ -100,5 +102,5 @@
         plt.show()
 
 if __name__ == '__main__':
-    #test_norm()
+    test_norm()
     test()
Index: WholeCell/13_PDO_Pathway_Inference/MCMC/setup.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC/setup.py b/WholeCell/13_PDO_Pathway_Inference/MCMC/setup.py
new file mode 100644
--- /dev/null	(date 1622045462770)
+++ b/WholeCell/13_PDO_Pathway_Inference/MCMC/setup.py	(date 1622045462770)
@@ -0,0 +1,9 @@
+from setuptools import setup, find_packages
+
+setup(
+    name='MCMC class',
+    version='0.1.0',
+    author='Andre Archer',
+    author_email='andrearcher2017@u.northwestern.edu',
+    packages= ['MCMC']
+)
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1622045462762)
+++ b/.idea/vcs.xml	(date 1622045462762)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1622045462762)
+++ b/.idea/modules.xml	(date 1622045462762)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/MCP.iml" filepath="$PROJECT_DIR$/.idea/MCP.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: WholeCell/13_PDO_Pathway_Inference/MCMC/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC/main.py b/WholeCell/13_PDO_Pathway_Inference/MCMC/main.py
new file mode 100644
--- /dev/null	(date 1622045462770)
+++ b/WholeCell/13_PDO_Pathway_Inference/MCMC/main.py	(date 1622045462770)
@@ -0,0 +1,97 @@
+import matplotlib as mpl
+mpl.rcParams['text.usetex'] = True
+mpl.rcParams['text.latex.preamble'] = r'\usepackage{amsmath}'
+import matplotlib.pyplot as plt
+from MCMC import *
+from mpi4py import MPI
+import time
+from os.path import dirname, abspath
+ROOT_PATH =dirname(abspath(__file__))
+
+comm = MPI.COMM_WORLD
+size = comm.Get_size()
+rank = comm.Get_rank()
+
+def main(argv, arc):
+	"""
+	Generates plots and data files of MCMC walks of the posterior distribution of dhaB_dhaT_model
+
+	@param argv[1]: number of MCMC walks
+	@param argv[2:5]: standard deviation for external glycerol, 1,3-PDO and DCW
+	@param argv[5]: parameter distribution -- "log_norm" or "log_unif"
+	@param argv[6]: boolean for fixed or adaptive. 0 for fixed, 1 for adaptive
+	@param argv[7]: fixed MCMC step size
+	@param argv[8]: weighed step size between adaptive MCMC step size and fixed MCMC step size
+	@param arc: number of arguments
+	@return:
+	"""
+	# get arguments
+	nsamps = int(float(argv[1]))
+	sigma = [float(arg) for arg in argv[2:5]]
+	transform =argv[5]
+	dhaB_dhaT_model = DhaBDhaTModelMCMC(transform=transform)
+	adaptive = int(argv[6])
+	lbda = float(argv[7])
+	if adaptive:
+		beta = float(argv[8])
+
+	# set distributions
+	loglik_sigma = lambda params: loglik(params,dhaB_dhaT_model,sigma=sigma)
+	logpost = lambda params: loglik_sigma(params) + logprior(params, transform)
+	rprior_ds = lambda n: rprior(n, transform)
+
+	# set inital starting point
+	def initial_param():
+		file_name = ROOT_PATH+'/output/MCMC_results_data/old_files/adaptive_lambda_0,01_beta_0,05_norm_nsamples_1000_sigma_[2,2,0,2]_date_2021_04_15_00_21_rank_0'
+		param_start = load_obj(file_name)[-1]
+		return param_start
+
+ 	# if adaptive or fixed MCMC
+	if adaptive:
+		time_start = time.time()
+		tdraws = adaptive_postdraws(logpost, initial_param, nsamp=nsamps,beta=beta, lbda = lbda)
+		time_end = time.time()
+		print((time_end-time_start)/float(nsamps))
+	else:
+		time_start = time.time()
+		tdraws = postdraws(logpost, rprior_ds,initial_param,  nsamp=nsamps,lbda = lbda)
+		time_end = time.time()
+		print((time_end-time_start)/float(2*nsamps))
+	# store results
+	date_string = time.strftime("%Y_%m_%d_%H_%M")
+
+	# store images
+	for i,param_name in enumerate(VARS_TO_TEX.keys()):
+		plt.plot(range(int(nsamps)),tdraws[:,i])
+		plt.title('Plot of MCMC distribution of ' + r'$\log(' + VARS_TO_TEX[param_name][1:-1] + ')$')
+		plt.xlabel('iterations index')
+		plt.ylabel(r'$\log(' + VARS_TO_TEX[param_name][1:-1] + ')$')
+		if adaptive:
+			adapt_name = "adaptive"
+			folder_name = ROOT_PATH+'/output/MCMC_results_plots/'+ adapt_name + "/sigma_"  + str(np.round(sigma,decimals=3)).replace('.',',').replace(' ','') +  "/" + "lambda_" + str(lbda).replace('.',',') + "_beta_" +  str(beta).replace('.',',')
+		else:
+			adapt_name = "fixed"
+			folder_name = ROOT_PATH+'/output/MCMC_results_plots/'+ adapt_name + "/sigma_"  + str(np.round(sigma,decimals=3)).replace('.',',').replace(' ','') +  "/" + "lambda_" + str(lbda).replace('.',',')
+
+		folder_name += "/nsamples_" + str(nsamps) +"/" + transform[4:] + "/param_" + param_name
+		Path(folder_name).mkdir(parents=True, exist_ok=True)
+		file_name = folder_name +'/date_'+date_string  + "_rank_" + str(rank)+ '.png'
+		plt.savefig(file_name,bbox_inches='tight')
+		plt.close()
+
+	# save pickle data
+	if adaptive:
+		adapt_name = "adaptive"
+		folder_name = ROOT_PATH+'/output/MCMC_results_data/' + adapt_name + "/sigma_"  + str(np.round(sigma,decimals=3)).replace('.',',').replace(' ','') +  "/" + "lambda_" + str(lbda).replace('.',',') + "_beta_" +  str(beta).replace('.',',')
+	else:
+		adapt_name = "fixed"
+		folder_name =ROOT_PATH+'/output/MCMC_results_data/' + adapt_name + "/sigma_"  + str(np.round(sigma,decimals=3)).replace('.',',').replace(' ','') + "/"+  "lambda_" + str(lbda).replace('.',',')
+
+	folder_name += "/nsamples_" + str(nsamps) +"/" + transform[4:]
+	Path(folder_name).mkdir(parents=True, exist_ok=True)
+	file_name = folder_name + "/date_" +date_string  + "_rank_" + str(rank)
+	save_obj(tdraws,file_name)
+
+
+if __name__ == '__main__':
+	main(sys.argv, len(sys.argv))
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1622045462762)
+++ b/.idea/misc.xml	(date 1622045462762)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (MCP)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/top_level.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/top_level.txt b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/top_level.txt
new file mode 100644
--- /dev/null	(date 1622045462770)
+++ b/WholeCell/13_PDO_Pathway_Inference/MCMC/MCMC_class.egg-info/top_level.txt	(date 1622045462770)
@@ -0,0 +1,1 @@
+MCMC
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/plotting_stuff.py b/WholeCell/13_PDO_Pathway_Inference/trash/plotting_stuff.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/plotting_stuff.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/plotting_stuff.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/out.txt b/WholeCell/13_PDO_Pathway_Inference/trash/out.txt
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/out.txt
rename to WholeCell/13_PDO_Pathway_Inference/trash/out.txt
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/misc_functions.py b/WholeCell/13_PDO_Pathway_Inference/trash/misc_functions.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/misc_functions.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/misc_functions.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/generate_synthetic_data.py b/WholeCell/13_PDO_Pathway_Inference/trash/generate_synthetic_data.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/generate_synthetic_data.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/generate_synthetic_data.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/energy_min_point_sample.py b/WholeCell/13_PDO_Pathway_Inference/trash/energy_min_point_sample.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/energy_min_point_sample.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/energy_min_point_sample.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/dhaT_parameters.py b/WholeCell/13_PDO_Pathway_Inference/trash/dhaT_parameters.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/dhaT_parameters.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/dhaT_parameters.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/dhaB_dhaT_model.py b/WholeCell/13_PDO_Pathway_Inference/trash/dhaB_dhaT_model.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/dhaB_dhaT_model.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/dhaB_dhaT_model.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/data_gen_funs.py b/WholeCell/13_PDO_Pathway_Inference/trash/data_gen_funs.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/data_gen_funs.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/data_gen_funs.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/__init__.py b/WholeCell/13_PDO_Pathway_Inference/__init__.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/__init__.py
rename to WholeCell/13_PDO_Pathway_Inference/__init__.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/.idea/vcs.xml b/WholeCell/13_PDO_Pathway_Inference/.idea/vcs.xml
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/.idea/vcs.xml
rename to WholeCell/13_PDO_Pathway_Inference/.idea/vcs.xml
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/.idea/modules.xml b/WholeCell/13_PDO_Pathway_Inference/.idea/modules.xml
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/.idea/modules.xml
rename to WholeCell/13_PDO_Pathway_Inference/.idea/modules.xml
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/.idea/misc.xml b/WholeCell/13_PDO_Pathway_Inference/.idea/misc.xml
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/.idea/misc.xml
rename to WholeCell/13_PDO_Pathway_Inference/.idea/misc.xml
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/constants.py b/WholeCell/13_PDO_Pathway_Inference/trash/constants.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/constants.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/constants.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/build_separable_GP.py b/WholeCell/13_PDO_Pathway_Inference/trash/build_separable_GP.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/build_separable_GP.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/build_separable_GP.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/build_emulator.py b/WholeCell/13_PDO_Pathway_Inference/trash/build_emulator.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/build_emulator.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/build_emulator.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/active_learning_train_GP.py b/WholeCell/13_PDO_Pathway_Inference/trash/active_learning_train_GP.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/active_learning_train_GP.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/active_learning_train_GP.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/active_learning_generate_training_set.py b/WholeCell/13_PDO_Pathway_Inference/trash/active_learning_generate_training_set.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/ActiveLearning/active_learning_generate_training_set.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/active_learning_generate_training_set.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/active_learning.py b/WholeCell/13_PDO_Pathway_Inference/trash/active_learning.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/active_learning.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/active_learning.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/trash/__init__.py b/WholeCell/13_PDO_Pathway_Inference/trash/__init__.py
new file mode 100644
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/MCMC_dhaB_dhaT_model.py b/WholeCell/13_PDO_Pathway_Inference/trash/MCMC_dhaB_dhaT_model.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/MCMC_dhaB_dhaT_model.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/MCMC_dhaB_dhaT_model.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_all_parameters/MCMC_copy.py b/WholeCell/13_PDO_Pathway_Inference/trash/MCMC_copy.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_all_parameters/MCMC_copy.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/MCMC_copy.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/MCMC.py b/WholeCell/13_PDO_Pathway_Inference/trash/MCMC.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/MCMC.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/MCMC.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/setup.py b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/setup.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/setup.py
rename to WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/setup.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/base_dhaB_dhaT_model/model_constants.py b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/base_dhaB_dhaT_model/model_constants.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/base_dhaB_dhaT_model/model_constants.py
rename to WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/base_dhaB_dhaT_model/model_constants.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/base_dhaB_dhaT_model/misc_functions.py b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/base_dhaB_dhaT_model/misc_functions.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/base_dhaB_dhaT_model/misc_functions.py
rename to WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/base_dhaB_dhaT_model/misc_functions.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/base_dhaB_dhaT_model/dhaB_dhaT_model.py b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/base_dhaB_dhaT_model/dhaB_dhaT_model.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/base_dhaB_dhaT_model/dhaB_dhaT_model.py
rename to WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/base_dhaB_dhaT_model/dhaB_dhaT_model.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/base_dhaB_dhaT_model/data_set_constants.py b/WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/base_dhaB_dhaT_model/data_set_constants.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/base_dhaB_dhaT_model/base_dhaB_dhaT_model/data_set_constants.py
rename to WholeCell/13_PDO_Pathway_Inference/base_dhaB_dhaT_model/base_dhaB_dhaT_model/data_set_constants.py
diff --git a/WholeCell/__init__.py b/WholeCell/__init__.py
new file mode 100644
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_all_parameters/dhaB_dhaT_model.py b/WholeCell/Trash/MCMC_all_parameters/dhaB_dhaT_model.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_all_parameters/dhaB_dhaT_model.py
rename to WholeCell/Trash/MCMC_all_parameters/dhaB_dhaT_model.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_all_parameters/constants.py b/WholeCell/Trash/MCMC_all_parameters/constants.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_all_parameters/constants.py
rename to WholeCell/Trash/MCMC_all_parameters/constants.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_all_parameters/MCMC_dhaB_dhaT_model.py b/WholeCell/Trash/MCMC_all_parameters/MCMC_dhaB_dhaT_model.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_all_parameters/MCMC_dhaB_dhaT_model.py
rename to WholeCell/Trash/MCMC_all_parameters/MCMC_dhaB_dhaT_model.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/MCMC_copy.py b/WholeCell/Trash/MCMC_all_parameters/MCMC_copy.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/MCMC_copy.py
rename to WholeCell/Trash/MCMC_all_parameters/MCMC_copy.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_all_parameters/MCMC.py b/WholeCell/Trash/MCMC_all_parameters/MCMC.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_all_parameters/MCMC.py
rename to WholeCell/Trash/MCMC_all_parameters/MCMC.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/.idea/MCMC_fixed_parameters.iml b/WholeCell/13_PDO_Pathway_Inference/.idea/MCMC_fixed_parameters.iml
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/.idea/MCMC_fixed_parameters.iml
rename to WholeCell/13_PDO_Pathway_Inference/.idea/MCMC_fixed_parameters.iml
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/__init__.py b/WholeCell/13_PDO_Pathway_Inference/MCMC/plot_histogram_parameters_true_model.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/MCMC/__init__.py
rename to WholeCell/13_PDO_Pathway_Inference/MCMC/plot_histogram_parameters_true_model.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/train_separable_GP.py b/WholeCell/13_PDO_Pathway_Inference/trash/train_separable_GP.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/train_separable_GP.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/train_separable_GP.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/test.py b/WholeCell/13_PDO_Pathway_Inference/trash/test.py
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/trash/test.py
rename to WholeCell/13_PDO_Pathway_Inference/trash/test.py
diff --git a/WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
rename from WholeCell/13_PDO_Pathway_Inference/MCMC_fixed_parameters/.idea/inspectionProfiles/profiles_settings.xml
rename to .idea/inspectionProfiles/profiles_settings.xml
